
lab_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002aa  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af2  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000799  00000000  00000000  00000f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000483  00000000  00000000  000016b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000134  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 93 00 	call	0x126	; 0x126 <main>
  9e:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_toggle (volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name ^= (1 << pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 2b       	or	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
  e0:	fc 01       	movw	r30, r24
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <GPIO_read>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  uint8_t containing 1 or 0
 **********************************************************************/
uint8_t GPIO_read (volatile uint8_t *reg_name, uint8_t pin_num)
{
    return (((*reg_name) >> pin_num) & 1);
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <GPIO_read+0xc>
 11a:	95 95       	asr	r25
 11c:	87 95       	ror	r24
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <GPIO_read+0x8>
 122:	81 70       	andi	r24, 0x01	; 1
 124:	08 95       	ret

00000126 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B - active low
    GPIO_config_output(&DDRB, LED_D1);
 126:	65 e0       	ldi	r22, 0x05	; 5
 128:	84 e2       	ldi	r24, 0x24	; 36
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D1); // high
 130:	65 e0       	ldi	r22, 0x05	; 5
 132:	85 e2       	ldi	r24, 0x25	; 37
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
    
    GPIO_config_output(&DDRB, LED_D2);
 13a:	64 e0       	ldi	r22, 0x04	; 4
 13c:	84 e2       	ldi	r24, 0x24	; 36
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D2); // low
 144:	64 e0       	ldi	r22, 0x04	; 4
 146:	85 e2       	ldi	r24, 0x25	; 37
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        
    GPIO_config_output(&DDRB, LED_D3);
 14e:	63 e0       	ldi	r22, 0x03	; 3
 150:	84 e2       	ldi	r24, 0x24	; 36
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D3); // low
 158:	63 e0       	ldi	r22, 0x03	; 3
 15a:	85 e2       	ldi	r24, 0x25	; 37
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            
    GPIO_config_output(&DDRB, LED_D4);
 162:	62 e0       	ldi	r22, 0x02	; 2
 164:	84 e2       	ldi	r24, 0x24	; 36
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D4); // low
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	85 e2       	ldi	r24, 0x25	; 37
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    
    GPIO_config_input_pullup(&DDRC, BUTTON);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	87 e2       	ldi	r24, 0x27	; 39
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 180:	e1 e8       	ldi	r30, 0x81	; 129
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8b 7f       	andi	r24, 0xFB	; 251
 188:	80 83       	st	Z, r24
 18a:	80 81       	ld	r24, Z
 18c:	83 60       	ori	r24, 0x03	; 3
 18e:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 190:	ef e6       	ldi	r30, 0x6F	; 111
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	81 60       	ori	r24, 0x01	; 1
 198:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 19a:	78 94       	sei
    
    enum speed_states {SPEED_4MS = 0, SPEED_33MS = 1, SPEED_262MS = 2, SPEED_1S = 3, SPEED_4S = 4};
    uint8_t speed_state = SPEED_262MS;
 19c:	c2 e0       	ldi	r28, 0x02	; 2
    while (1)
    {
        /* Empty loop. All subsequent operations are performed exclusively 
         * inside interrupt service routines ISRs */
        
        if (GPIO_read(&PINC, BUTTON) == 0) {
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	86 e2       	ldi	r24, 0x26	; 38
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_read>
 1a8:	81 11       	cpse	r24, r1
 1aa:	f9 cf       	rjmp	.-14     	; 0x19e <main+0x78>
            switch(speed_state) {
 1ac:	c2 30       	cpi	r28, 0x02	; 2
 1ae:	f1 f0       	breq	.+60     	; 0x1ec <main+0xc6>
 1b0:	28 f4       	brcc	.+10     	; 0x1bc <main+0x96>
 1b2:	cc 23       	and	r28, r28
 1b4:	79 f1       	breq	.+94     	; 0x214 <main+0xee>
 1b6:	c1 30       	cpi	r28, 0x01	; 1
 1b8:	19 f1       	breq	.+70     	; 0x200 <main+0xda>
 1ba:	36 c0       	rjmp	.+108    	; 0x228 <main+0x102>
 1bc:	c3 30       	cpi	r28, 0x03	; 3
 1be:	61 f0       	breq	.+24     	; 0x1d8 <main+0xb2>
 1c0:	c4 30       	cpi	r28, 0x04	; 4
 1c2:	91 f5       	brne	.+100    	; 0x228 <main+0x102>
                case (SPEED_4S):
                    speed_state = SPEED_1S;
                    TIM1_overflow_1s();
 1c4:	e1 e8       	ldi	r30, 0x81	; 129
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	8c 7f       	andi	r24, 0xFC	; 252
 1cc:	80 83       	st	Z, r24
 1ce:	80 81       	ld	r24, Z
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	80 83       	st	Z, r24
         * inside interrupt service routines ISRs */
        
        if (GPIO_read(&PINC, BUTTON) == 0) {
            switch(speed_state) {
                case (SPEED_4S):
                    speed_state = SPEED_1S;
 1d4:	c3 e0       	ldi	r28, 0x03	; 3
                    TIM1_overflow_1s();
                    break;
 1d6:	31 c0       	rjmp	.+98     	; 0x23a <main+0x114>
                    
                case (SPEED_1S):
                    speed_state = SPEED_262MS;
                    TIM1_overflow_262ms();
 1d8:	e1 e8       	ldi	r30, 0x81	; 129
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	8b 7f       	andi	r24, 0xFB	; 251
 1e0:	80 83       	st	Z, r24
 1e2:	80 81       	ld	r24, Z
 1e4:	83 60       	ori	r24, 0x03	; 3
 1e6:	80 83       	st	Z, r24
                    speed_state = SPEED_1S;
                    TIM1_overflow_1s();
                    break;
                    
                case (SPEED_1S):
                    speed_state = SPEED_262MS;
 1e8:	c2 e0       	ldi	r28, 0x02	; 2
                    TIM1_overflow_262ms();
                    break;
 1ea:	27 c0       	rjmp	.+78     	; 0x23a <main+0x114>
                
                case (SPEED_262MS):
                    speed_state = SPEED_33MS;
                    TIM1_overflow_33ms();
 1ec:	e1 e8       	ldi	r30, 0x81	; 129
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	8a 7f       	andi	r24, 0xFA	; 250
 1f4:	80 83       	st	Z, r24
 1f6:	80 81       	ld	r24, Z
 1f8:	82 60       	ori	r24, 0x02	; 2
 1fa:	80 83       	st	Z, r24
                    speed_state = SPEED_262MS;
                    TIM1_overflow_262ms();
                    break;
                
                case (SPEED_262MS):
                    speed_state = SPEED_33MS;
 1fc:	c1 e0       	ldi	r28, 0x01	; 1
                    TIM1_overflow_33ms();
                    break;
 1fe:	1d c0       	rjmp	.+58     	; 0x23a <main+0x114>
                
                case (SPEED_33MS):
                    speed_state = SPEED_4MS;
                    TIM1_overflow_4ms();
 200:	e1 e8       	ldi	r30, 0x81	; 129
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	89 7f       	andi	r24, 0xF9	; 249
 208:	80 83       	st	Z, r24
 20a:	80 81       	ld	r24, Z
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	80 83       	st	Z, r24
                    speed_state = SPEED_33MS;
                    TIM1_overflow_33ms();
                    break;
                
                case (SPEED_33MS):
                    speed_state = SPEED_4MS;
 210:	c0 e0       	ldi	r28, 0x00	; 0
                    TIM1_overflow_4ms();
                    break;
 212:	13 c0       	rjmp	.+38     	; 0x23a <main+0x114>
                
                case (SPEED_4MS):
                    speed_state = SPEED_4S;
                    TIM1_overflow_4s();
 214:	e1 e8       	ldi	r30, 0x81	; 129
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8d 7f       	andi	r24, 0xFD	; 253
 21c:	80 83       	st	Z, r24
 21e:	80 81       	ld	r24, Z
 220:	85 60       	ori	r24, 0x05	; 5
 222:	80 83       	st	Z, r24
                    speed_state = SPEED_4MS;
                    TIM1_overflow_4ms();
                    break;
                
                case (SPEED_4MS):
                    speed_state = SPEED_4S;
 224:	c4 e0       	ldi	r28, 0x04	; 4
                    TIM1_overflow_4s();
                    break;
 226:	09 c0       	rjmp	.+18     	; 0x23a <main+0x114>
                    
                default:
                    speed_state = SPEED_4S;
                    TIM1_overflow_4s();
 228:	e1 e8       	ldi	r30, 0x81	; 129
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	8d 7f       	andi	r24, 0xFD	; 253
 230:	80 83       	st	Z, r24
 232:	80 81       	ld	r24, Z
 234:	85 60       	ori	r24, 0x05	; 5
 236:	80 83       	st	Z, r24
                    speed_state = SPEED_4S;
                    TIM1_overflow_4s();
                    break;
                    
                default:
                    speed_state = SPEED_4S;
 238:	c4 e0       	ldi	r28, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	89 e6       	ldi	r24, 0x69	; 105
 23e:	98 e1       	ldi	r25, 0x18	; 24
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x11a>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x124>
 24a:	00 00       	nop
 24c:	a8 cf       	rjmp	.-176    	; 0x19e <main+0x78>

0000024e <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	8f 93       	push	r24

static inline void knight_rider()
{
    static uint8_t state = (1 << LED_D1);
    static uint8_t dir = 0;
    if (dir == 0) {
 25a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 25e:	81 11       	cpse	r24, r1
 260:	0f c0       	rjmp	.+30     	; 0x280 <__vector_13+0x32>
        state =  (state >> 1);
 262:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 266:	86 95       	lsr	r24
 268:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        PORTB = ~state;
 26c:	80 95       	com	r24
 26e:	85 b9       	out	0x05, r24	; 5
        if (state == (1 << LED_D4)) dir = 1;
 270:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 274:	84 30       	cpi	r24, 0x04	; 4
 276:	89 f4       	brne	.+34     	; 0x29a <__vector_13+0x4c>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 27e:	0d c0       	rjmp	.+26     	; 0x29a <__vector_13+0x4c>
    } else {
        state = (state << 1);
 280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 284:	88 0f       	add	r24, r24
 286:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        PORTB = ~state;
 28a:	80 95       	com	r24
 28c:	85 b9       	out	0x05, r24	; 5
        if (state == (1 << LED_D1)) dir = 0;
 28e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 292:	80 32       	cpi	r24, 0x20	; 32
 294:	11 f4       	brne	.+4      	; 0x29a <__vector_13+0x4c>
 296:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
    knight_rider();
}
 29a:	8f 91       	pop	r24
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <_exit>:
 2a6:	f8 94       	cli

000002a8 <__stop_program>:
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <__stop_program>
