
lab_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000416  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000107  0080012a  0080012a  000004d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f1e  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000924  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073b  00000000  00000000  00001e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a3  00000000  00000000  000027ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ac  00000000  00000000  00002d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000032fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_18>
  4c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 33       	cpi	r26, 0x31	; 49
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 97 01 	call	0x32e	; 0x32e <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_262ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8b 7f       	andi	r24, 0xFB	; 251
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 c7 01 	call	0x38e	; 0x38e <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <read_and_send_tmp_hum>:
{
    read_and_send_tmp_hum();
}

void read_and_send_tmp_hum(void)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <read_and_send_tmp_hum+0x6>
  de:	00 d0       	rcall	.+0      	; 0xe0 <read_and_send_tmp_hum+0x8>
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
    static sensor_state_t state = SENSOR_IDLE;  // Current state of the FSM
    uint8_t addr = 0xB8 >> 1;
    char uart_string[5] = "00000";         // String for converting numbers by itoa()
  e6:	85 e0       	ldi	r24, 0x05	; 5
  e8:	e1 e0       	ldi	r30, 0x01	; 1
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	de 01       	movw	r26, r28
  ee:	11 96       	adiw	r26, 0x01	; 1
  f0:	01 90       	ld	r0, Z+
  f2:	0d 92       	st	X+, r0
  f4:	8a 95       	dec	r24
  f6:	e1 f7       	brne	.-8      	; 0xf0 <read_and_send_tmp_hum+0x18>
    static uint16_t result = 0;
    
    // FSM
    switch (state)
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	09 f4       	brne	.+2      	; 0x102 <read_and_send_tmp_hum+0x2a>
 100:	43 c0       	rjmp	.+134    	; 0x188 <read_and_send_tmp_hum+0xb0>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	09 f4       	brne	.+2      	; 0x108 <read_and_send_tmp_hum+0x30>
 106:	44 c0       	rjmp	.+136    	; 0x190 <read_and_send_tmp_hum+0xb8>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	09 f0       	breq	.+2      	; 0x10e <read_and_send_tmp_hum+0x36>
 10c:	45 c0       	rjmp	.+138    	; 0x198 <read_and_send_tmp_hum+0xc0>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 10e:	4a e0       	ldi	r20, 0x0A	; 10
 110:	be 01       	movw	r22, r28
 112:	6f 5f       	subi	r22, 0xFF	; 255
 114:	7f 4f       	sbci	r23, 0xFF	; 255
 116:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 11a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 11e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__itoa_ncheck>
    {
    // Increment I2C slave address
    case SENSOR_IDLE:
        itoa(result, uart_string, 10);
        uart_puts(uart_string);
 122:	ce 01       	movw	r24, r28
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	0e 94 c7 01 	call	0x38e	; 0x38e <uart_puts>
        uart_puts("\n\r");
 12a:	87 e2       	ldi	r24, 0x27	; 39
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 c7 01 	call	0x38e	; 0x38e <uart_puts>
        
        twi_start((addr<<1) + TWI_WRITE);   // start write
 132:	88 eb       	ldi	r24, 0xB8	; 184
 134:	0e 94 0a 01 	call	0x214	; 0x214 <twi_start>
        twi_write(0x00);                    // byte sel
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 27 01 	call	0x24e	; 0x24e <twi_write>
        
        twi_start((addr<<1) + TWI_READ);    // start read
 13e:	89 eb       	ldi	r24, 0xB9	; 185
 140:	0e 94 0a 01 	call	0x214	; 0x214 <twi_start>
        result = (uint16_t)twi_read_ack();            // read byte
 144:	0e 94 31 01 	call	0x262	; 0x262 <twi_read_ack>
        result <<= 8;
 148:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
 14c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <__data_end+0x1>
        twi_stop();
 150:	0e 94 3b 01 	call	0x276	; 0x276 <twi_stop>
        
        twi_start((addr<<1) + TWI_WRITE);   // start write
 154:	88 eb       	ldi	r24, 0xB8	; 184
 156:	0e 94 0a 01 	call	0x214	; 0x214 <twi_start>
        twi_write(0x01);                    // byte sel
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 27 01 	call	0x24e	; 0x24e <twi_write>
                
        twi_start((addr<<1) + TWI_READ);    // start read
 160:	89 eb       	ldi	r24, 0xB9	; 185
 162:	0e 94 0a 01 	call	0x214	; 0x214 <twi_start>
        result |= (uint16_t)twi_read_ack();
 166:	0e 94 31 01 	call	0x262	; 0x262 <twi_read_ack>
 16a:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
 16e:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__data_end+0x1>
 172:	28 2b       	or	r18, r24
 174:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__data_end+0x1>
 178:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__data_end>
        twi_stop();
 17c:	0e 94 3b 01 	call	0x276	; 0x276 <twi_stop>
        
        state = SENSOR_READ_H0;
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 186:	0b c0       	rjmp	.+22     	; 0x19e <read_and_send_tmp_hum+0xc6>
        
    case SENSOR_READ_H0:
        
        state = SENSOR_READ_H1;
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break; 
 18e:	07 c0       	rjmp	.+14     	; 0x19e <read_and_send_tmp_hum+0xc6>
        
    case SENSOR_READ_H1:

        state = SENSOR_IDLE;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 196:	03 c0       	rjmp	.+6      	; 0x19e <read_and_send_tmp_hum+0xc6>
    

    default:
        state = SENSOR_IDLE;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
    }
}
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
    read_and_send_tmp_hum();
 1d0:	0e 94 6c 00 	call	0xd8	; 0xd8 <read_and_send_tmp_hum>
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 1f6:	87 b1       	in	r24, 0x07	; 7
 1f8:	8f 7c       	andi	r24, 0xCF	; 207
 1fa:	87 b9       	out	0x07, r24	; 7
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	80 63       	ori	r24, 0x30	; 48
 200:	88 b9       	out	0x08, r24	; 8
 202:	e9 eb       	ldi	r30, 0xB9	; 185
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	8c 7f       	andi	r24, 0xFC	; 252
 20a:	80 83       	st	Z, r24
 20c:	88 e9       	ldi	r24, 0x98	; 152
 20e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 212:	08 95       	ret

00000214 <twi_start>:
 214:	94 ea       	ldi	r25, 0xA4	; 164
 216:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 21a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 21e:	99 23       	and	r25, r25
 220:	e4 f7       	brge	.-8      	; 0x21a <twi_start+0x6>
 222:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 226:	84 e8       	ldi	r24, 0x84	; 132
 228:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 22c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 230:	88 23       	and	r24, r24
 232:	e4 f7       	brge	.-8      	; 0x22c <twi_start+0x18>
 234:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 238:	88 7f       	andi	r24, 0xF8	; 248
 23a:	88 31       	cpi	r24, 0x18	; 24
 23c:	21 f0       	breq	.+8      	; 0x246 <twi_start+0x32>
 23e:	80 34       	cpi	r24, 0x40	; 64
 240:	21 f4       	brne	.+8      	; 0x24a <twi_start+0x36>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	08 95       	ret

0000024e <twi_write>:
 24e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 252:	84 e8       	ldi	r24, 0x84	; 132
 254:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 258:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 25c:	88 23       	and	r24, r24
 25e:	e4 f7       	brge	.-8      	; 0x258 <twi_write+0xa>
 260:	08 95       	ret

00000262 <twi_read_ack>:
 262:	84 ec       	ldi	r24, 0xC4	; 196
 264:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 268:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 26c:	88 23       	and	r24, r24
 26e:	e4 f7       	brge	.-8      	; 0x268 <twi_read_ack+0x6>
 270:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 274:	08 95       	ret

00000276 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 276:	84 e9       	ldi	r24, 0x94	; 148
 278:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 27c:	08 95       	ret

0000027e <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	2f 93       	push	r18
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
 292:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 296:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 29a:	8c 71       	andi	r24, 0x1C	; 28
 29c:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <UART_RxHead>
 2a0:	ef 5f       	subi	r30, 0xFF	; 255
 2a2:	ef 77       	andi	r30, 0x7F	; 127
 2a4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <UART_RxTail>
 2a8:	e9 17       	cp	r30, r25
 2aa:	39 f0       	breq	.+14     	; 0x2ba <__vector_18+0x3c>
 2ac:	e0 93 2e 01 	sts	0x012E, r30	; 0x80012e <UART_RxHead>
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	ef 5c       	subi	r30, 0xCF	; 207
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	20 83       	st	Z, r18
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <__vector_18+0x3e>
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <UART_LastRxError>
 2c0:	89 2b       	or	r24, r25
 2c2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <UART_LastRxError>
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <__vector_19>:
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
 2ec:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <UART_TxHead>
 2f0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <UART_TxTail>
 2f4:	98 17       	cp	r25, r24
 2f6:	69 f0       	breq	.+26     	; 0x312 <__vector_19+0x38>
 2f8:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <UART_TxTail>
 2fc:	ef 5f       	subi	r30, 0xFF	; 255
 2fe:	ef 77       	andi	r30, 0x7F	; 127
 300:	e0 93 2f 01 	sts	0x012F, r30	; 0x80012f <UART_TxTail>
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	ef 54       	subi	r30, 0x4F	; 79
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	80 81       	ld	r24, Z
 30c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 310:	05 c0       	rjmp	.+10     	; 0x31c <__vector_19+0x42>
 312:	e1 ec       	ldi	r30, 0xC1	; 193
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	8f 7d       	andi	r24, 0xDF	; 223
 31a:	80 83       	st	Z, r24
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <uart_init>:
 32e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <UART_TxHead>
 332:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <UART_TxTail>
 336:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <UART_RxHead>
 33a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <UART_RxTail>
 33e:	28 2f       	mov	r18, r24
 340:	39 2f       	mov	r19, r25
 342:	33 23       	and	r19, r19
 344:	1c f4       	brge	.+6      	; 0x34c <uart_init+0x1e>
 346:	22 e0       	ldi	r18, 0x02	; 2
 348:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 34c:	90 78       	andi	r25, 0x80	; 128
 34e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 352:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 356:	88 e9       	ldi	r24, 0x98	; 152
 358:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 362:	08 95       	ret

00000364 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 364:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <UART_TxHead>
 368:	2f 5f       	subi	r18, 0xFF	; 255
 36a:	2f 77       	andi	r18, 0x7F	; 127

    while (tmphead == UART_TxTail)
 36c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <UART_TxTail>
 370:	29 17       	cp	r18, r25
 372:	e1 f3       	breq	.-8      	; 0x36c <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 374:	e2 2f       	mov	r30, r18
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	ef 54       	subi	r30, 0x4F	; 79
 37a:	fe 4f       	sbci	r31, 0xFE	; 254
 37c:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 37e:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 382:	e1 ec       	ldi	r30, 0xC1	; 193
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	80 62       	ori	r24, 0x20	; 32
 38a:	80 83       	st	Z, r24
 38c:	08 95       	ret

0000038e <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ec 01       	movw	r28, r24
    while (*s)
 394:	03 c0       	rjmp	.+6      	; 0x39c <uart_puts+0xe>
        uart_putc(*s++);
 396:	21 96       	adiw	r28, 0x01	; 1
 398:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 39c:	88 81       	ld	r24, Y
 39e:	81 11       	cpse	r24, r1
 3a0:	fa cf       	rjmp	.-12     	; 0x396 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <__itoa_ncheck>:
 3a8:	bb 27       	eor	r27, r27
 3aa:	4a 30       	cpi	r20, 0x0A	; 10
 3ac:	31 f4       	brne	.+12     	; 0x3ba <__itoa_ncheck+0x12>
 3ae:	99 23       	and	r25, r25
 3b0:	22 f4       	brpl	.+8      	; 0x3ba <__itoa_ncheck+0x12>
 3b2:	bd e2       	ldi	r27, 0x2D	; 45
 3b4:	90 95       	com	r25
 3b6:	81 95       	neg	r24
 3b8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ba:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__utoa_common>

000003be <__utoa_ncheck>:
 3be:	bb 27       	eor	r27, r27

000003c0 <__utoa_common>:
 3c0:	fb 01       	movw	r30, r22
 3c2:	55 27       	eor	r21, r21
 3c4:	aa 27       	eor	r26, r26
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	aa 1f       	adc	r26, r26
 3cc:	a4 17       	cp	r26, r20
 3ce:	10 f0       	brcs	.+4      	; 0x3d4 <__utoa_common+0x14>
 3d0:	a4 1b       	sub	r26, r20
 3d2:	83 95       	inc	r24
 3d4:	50 51       	subi	r21, 0x10	; 16
 3d6:	b9 f7       	brne	.-18     	; 0x3c6 <__utoa_common+0x6>
 3d8:	a0 5d       	subi	r26, 0xD0	; 208
 3da:	aa 33       	cpi	r26, 0x3A	; 58
 3dc:	08 f0       	brcs	.+2      	; 0x3e0 <__utoa_common+0x20>
 3de:	a9 5d       	subi	r26, 0xD9	; 217
 3e0:	a1 93       	st	Z+, r26
 3e2:	00 97       	sbiw	r24, 0x00	; 0
 3e4:	79 f7       	brne	.-34     	; 0x3c4 <__utoa_common+0x4>
 3e6:	b1 11       	cpse	r27, r1
 3e8:	b1 93       	st	Z+, r27
 3ea:	11 92       	st	Z+, r1
 3ec:	cb 01       	movw	r24, r22
 3ee:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <strrev>

000003f2 <strrev>:
 3f2:	dc 01       	movw	r26, r24
 3f4:	fc 01       	movw	r30, r24
 3f6:	67 2f       	mov	r22, r23
 3f8:	71 91       	ld	r23, Z+
 3fa:	77 23       	and	r23, r23
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <strrev+0x4>
 3fe:	32 97       	sbiw	r30, 0x02	; 2
 400:	04 c0       	rjmp	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 402:	7c 91       	ld	r23, X
 404:	6d 93       	st	X+, r22
 406:	70 83       	st	Z, r23
 408:	62 91       	ld	r22, -Z
 40a:	ae 17       	cp	r26, r30
 40c:	bf 07       	cpc	r27, r31
 40e:	c8 f3       	brcs	.-14     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
