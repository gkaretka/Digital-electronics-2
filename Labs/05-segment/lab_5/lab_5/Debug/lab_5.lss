
lab_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000316  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000316  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800118  00800118  000003c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000daf  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a3  00000000  00000000  0000129b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000688  00000000  00000000  00001b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004eb  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a9  00000000  00000000  00002847  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002cf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  9e:	0c 94 89 01 	jmp	0x312	; 0x312 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                             // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register -- turn pull-up on
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  d8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SEG_init>
    SEG_clear();
  dc:	0e 94 65 01 	call	0x2ca	; 0x2ca <SEG_clear>
    
    // Configure 16-bit Timer/Counter1 for Decimal counter
    TIM1_overflow_33ms();
  e0:	e1 e8       	ldi	r30, 0x81	; 129
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	8a 7f       	andi	r24, 0xFA	; 250
  e8:	80 83       	st	Z, r24
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24
    TIM0_overflow_128us();
  f0:	85 b5       	in	r24, 0x25	; 37
  f2:	8a 7f       	andi	r24, 0xFA	; 250
  f4:	85 bd       	out	0x25, r24	; 37
  f6:	85 b5       	in	r24, 0x25	; 37
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	85 bd       	out	0x25, r24	; 37
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_interrupt_enable();
  fc:	ef e6       	ldi	r30, 0x6F	; 111
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	81 60       	ori	r24, 0x01	; 1
 104:	80 83       	st	Z, r24
    TIM0_overflow_interrupt_enable();
 106:	ee e6       	ldi	r30, 0x6E	; 110
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask
    sei();
 110:	78 94       	sei
 112:	ff cf       	rjmp	.-2      	; 0x112 <main+0x3a>

00000114 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
    val++;
 124:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <val>
 128:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <val+0x1>
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <val+0x1>
 132:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <val>
    if (val == 9999) val = 0;
 136:	8f 30       	cpi	r24, 0x0F	; 15
 138:	97 42       	sbci	r25, 0x27	; 39
 13a:	21 f4       	brne	.+8      	; 0x144 <__vector_13+0x30>
 13c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <val+0x1>
 140:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <val>
}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
    static uint8_t pos = 0;  // This line will only run the first time
    static int pow10[5] = { 1, 10, 100, 1000, 10000 };
    
    // calculate digit from number and pos
    uint16_t loc_val = (val % pow10[pos+1]) / (pow10[pos]);
 176:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <__data_end>
 17a:	24 2f       	mov	r18, r20
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	31 96       	adiw	r30, 0x01	; 1
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	e2 5f       	subi	r30, 0xF2	; 242
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	60 81       	ld	r22, Z
 18c:	71 81       	ldd	r23, Z+1	; 0x01
 18e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <val>
 192:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <val+0x1>
 196:	0e 94 75 01 	call	0x2ea	; 0x2ea <__udivmodhi4>
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	f9 01       	movw	r30, r18
 1a0:	e2 5f       	subi	r30, 0xF2	; 242
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	60 81       	ld	r22, Z
 1a6:	71 81       	ldd	r23, Z+1	; 0x01
 1a8:	0e 94 75 01 	call	0x2ea	; 0x2ea <__udivmodhi4>
 1ac:	86 2f       	mov	r24, r22
    
    // Update segment
    SEG_update_shift_regs(loc_val, pos);
 1ae:	64 2f       	mov	r22, r20
 1b0:	0e 94 04 01 	call	0x208	; 0x208 <SEG_update_shift_regs>
    
    // Increment to go to next segment
    pos++;
 1b4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
    if (pos == 4) pos = 0;
 1be:	84 30       	cpi	r24, 0x04	; 4
 1c0:	11 f4       	brne	.+4      	; 0x1c6 <__vector_16+0x72>
 1c2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	7f 91       	pop	r23
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 1e8:	64 e0       	ldi	r22, 0x04	; 4
 1ea:	8a e2       	ldi	r24, 0x2A	; 42
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 1f2:	67 e0       	ldi	r22, 0x07	; 7
 1f4:	8a e2       	ldi	r24, 0x2A	; 42
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	84 e2       	ldi	r24, 0x24	; 36
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 206:	08 95       	ret

00000208 <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9
 20c:	e8 2f       	mov	r30, r24
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ec 5f       	subi	r30, 0xFC	; 252
 212:	fe 4f       	sbci	r31, 0xFE	; 254
 214:	d0 81       	ld	r29, Z
    position = segment_position[position];  // 0, 1, 2, 3
 216:	e6 2f       	mov	r30, r22
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	e0 50       	subi	r30, 0x00	; 0
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	c0 81       	ld	r28, Z

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORT_LATCH, SEG_LATCH);
 220:	64 e0       	ldi	r22, 0x04	; 4
 222:	8b e2       	ldi	r24, 0x2B	; 43
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORT_CLK, SEG_CLK);
 22a:	67 e0       	ldi	r22, 0x07	; 7
 22c:	8b e2       	ldi	r24, 0x2B	; 43
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORT_DATA, SEG_DATA);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	85 e2       	ldi	r24, 0x25	; 37
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	85 e0       	ldi	r24, 0x05	; 5
 240:	8a 95       	dec	r24
 242:	f1 f7       	brne	.-4      	; 0x240 <SEG_update_shift_regs+0x38>
 244:	00 00       	nop
    // Wait 1 us
    _delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	18 c0       	rjmp	.+48     	; 0x27a <SEG_update_shift_regs+0x72>
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        PORT_DATA = ((segments & 1) == 0) ? PORT_DATA & ~(1 << SEG_DATA) : PORT_DATA | (1 << SEG_DATA);
 24a:	d0 fd       	sbrc	r29, 0
 24c:	03 c0       	rjmp	.+6      	; 0x254 <SEG_update_shift_regs+0x4c>
 24e:	85 b1       	in	r24, 0x05	; 5
 250:	8e 7f       	andi	r24, 0xFE	; 254
 252:	02 c0       	rjmp	.+4      	; 0x258 <SEG_update_shift_regs+0x50>
 254:	85 b1       	in	r24, 0x05	; 5
 256:	81 60       	ori	r24, 0x01	; 1
 258:	85 b9       	out	0x05, r24	; 5
        // Shift "segments"
        segments >>= 1;
 25a:	d6 95       	lsr	r29
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	8a 95       	dec	r24
 260:	f1 f7       	brne	.-4      	; 0x25e <SEG_update_shift_regs+0x56>
 262:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        PORT_CLK |= (1 << SEG_CLK);
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	80 68       	ori	r24, 0x80	; 128
 268:	8b b9       	out	0x0b, r24	; 11
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	8a 95       	dec	r24
 26e:	f1 f7       	brne	.-4      	; 0x26c <SEG_update_shift_regs+0x64>
 270:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        PORT_CLK &= ~(1 << SEG_CLK);
 272:	8b b1       	in	r24, 0x0b	; 11
 274:	8f 77       	andi	r24, 0x7F	; 127
 276:	8b b9       	out	0x0b, r24	; 11
    // Wait 1 us
    _delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 278:	9f 5f       	subi	r25, 0xFF	; 255
 27a:	98 30       	cpi	r25, 0x08	; 8
 27c:	30 f3       	brcs	.-52     	; 0x24a <SEG_update_shift_regs+0x42>
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	18 c0       	rjmp	.+48     	; 0x2b2 <SEG_update_shift_regs+0xaa>
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        PORT_DATA = ((position & 1) == 0) ? PORT_DATA & ~(1 << SEG_DATA) : PORT_DATA | (1 << SEG_DATA);
 282:	c0 fd       	sbrc	r28, 0
 284:	03 c0       	rjmp	.+6      	; 0x28c <SEG_update_shift_regs+0x84>
 286:	85 b1       	in	r24, 0x05	; 5
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	02 c0       	rjmp	.+4      	; 0x290 <SEG_update_shift_regs+0x88>
 28c:	85 b1       	in	r24, 0x05	; 5
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	85 b9       	out	0x05, r24	; 5
        // Shift "position"
        position = position >> 1;
 292:	c6 95       	lsr	r28
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	8a 95       	dec	r24
 298:	f1 f7       	brne	.-4      	; 0x296 <SEG_update_shift_regs+0x8e>
 29a:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        PORT_CLK |= (1 << SEG_CLK);
 29c:	8b b1       	in	r24, 0x0b	; 11
 29e:	80 68       	ori	r24, 0x80	; 128
 2a0:	8b b9       	out	0x0b, r24	; 11
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <SEG_update_shift_regs+0x9c>
 2a8:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        PORT_CLK &= ~(1 << SEG_CLK);
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	8f 77       	andi	r24, 0x7F	; 127
 2ae:	8b b9       	out	0x0b, r24	; 11
        PORT_CLK &= ~(1 << SEG_CLK);
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2b0:	9f 5f       	subi	r25, 0xFF	; 255
 2b2:	98 30       	cpi	r25, 0x08	; 8
 2b4:	30 f3       	brcs	.-52     	; 0x282 <SEG_update_shift_regs+0x7a>
        // Pull CLK low
        PORT_CLK &= ~(1 << SEG_CLK);
    }

    // Pull LATCH high
    PORT_LATCH |= (1 << SEG_LATCH);
 2b6:	8b b1       	in	r24, 0x0b	; 11
 2b8:	80 61       	ori	r24, 0x10	; 16
 2ba:	8b b9       	out	0x0b, r24	; 11
 2bc:	85 e0       	ldi	r24, 0x05	; 5
 2be:	8a 95       	dec	r24
 2c0:	f1 f7       	brne	.-4      	; 0x2be <SEG_update_shift_regs+0xb6>
 2c2:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <SEG_clear>:

/**********************************************************************
 * Function: SEG_clear()
 **********************************************************************/
void SEG_clear (void)
{
 2ca:	cf 93       	push	r28
    for (uint8_t i = 0; i < 4; i++)
 2cc:	c0 e0       	ldi	r28, 0x00	; 0
 2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <SEG_clear+0x18>
        SEG_update_shift_regs(~(uint8_t)0, segment_position[i]);        
 2d0:	ec 2f       	mov	r30, r28
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	e0 50       	subi	r30, 0x00	; 0
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	60 81       	ld	r22, Z
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	0e 94 04 01 	call	0x208	; 0x208 <SEG_update_shift_regs>
/**********************************************************************
 * Function: SEG_clear()
 **********************************************************************/
void SEG_clear (void)
{
    for (uint8_t i = 0; i < 4; i++)
 2e0:	cf 5f       	subi	r28, 0xFF	; 255
 2e2:	c4 30       	cpi	r28, 0x04	; 4
 2e4:	a8 f3       	brcs	.-22     	; 0x2d0 <SEG_clear+0x6>
        SEG_update_shift_regs(~(uint8_t)0, segment_position[i]);        
}
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <__udivmodhi4>:
 2ea:	aa 1b       	sub	r26, r26
 2ec:	bb 1b       	sub	r27, r27
 2ee:	51 e1       	ldi	r21, 0x11	; 17
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <__udivmodhi4_ep>

000002f2 <__udivmodhi4_loop>:
 2f2:	aa 1f       	adc	r26, r26
 2f4:	bb 1f       	adc	r27, r27
 2f6:	a6 17       	cp	r26, r22
 2f8:	b7 07       	cpc	r27, r23
 2fa:	10 f0       	brcs	.+4      	; 0x300 <__udivmodhi4_ep>
 2fc:	a6 1b       	sub	r26, r22
 2fe:	b7 0b       	sbc	r27, r23

00000300 <__udivmodhi4_ep>:
 300:	88 1f       	adc	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	5a 95       	dec	r21
 306:	a9 f7       	brne	.-22     	; 0x2f2 <__udivmodhi4_loop>
 308:	80 95       	com	r24
 30a:	90 95       	com	r25
 30c:	bc 01       	movw	r22, r24
 30e:	cd 01       	movw	r24, r26
 310:	08 95       	ret

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
