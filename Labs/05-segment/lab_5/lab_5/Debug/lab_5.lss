
lab_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000210  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d96  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d9  00000000  00000000  0000113e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067f  00000000  00000000  00001a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  00002098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d7  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000377  00000000  00000000  0000269b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002a12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  8e:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                             // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register -- turn pull-up on
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  ae:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_low+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_low+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  c8:	0e 94 8d 00 	call	0x11a	; 0x11a <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(0b00001101, 0b00010000);
  cc:	60 e1       	ldi	r22, 0x10	; 16
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	0e 94 9d 00 	call	0x13a	; 0x13a <SEG_update_shift_regs>


    // Infinite loop
    while (1)
    {
            SEG_update_shift_regs(0b00001101, 0b00010000);
  d4:	60 e1       	ldi	r22, 0x10	; 16
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	0e 94 9d 00 	call	0x13a	; 0x13a <SEG_update_shift_regs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	83 ed       	ldi	r24, 0xD3	; 211
  e0:	90 e3       	ldi	r25, 0x30	; 48
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x1a>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x24>
  ec:	00 00       	nop
            _delay_ms(1000);
            SEG_clear();
  ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SEG_clear>
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	83 ed       	ldi	r24, 0xD3	; 211
  f6:	90 e3       	ldi	r25, 0x30	; 48
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x30>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x3a>
 102:	00 00       	nop
 104:	e7 cf       	rjmp	.-50     	; 0xd4 <main+0xc>

00000106 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
    // WRITE YOUR CODE HERE

 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 11a:	64 e0       	ldi	r22, 0x04	; 4
 11c:	8a e2       	ldi	r24, 0x2A	; 42
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 124:	67 e0       	ldi	r22, 0x07	; 7
 126:	8a e2       	ldi	r24, 0x2A	; 42
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	84 e2       	ldi	r24, 0x24	; 36
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
 138:	08 95       	ret

0000013a <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	d8 2f       	mov	r29, r24
 140:	c6 2f       	mov	r28, r22
    uint8_t bit_number;

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORT_LATCH, SEG_LATCH);
 142:	64 e0       	ldi	r22, 0x04	; 4
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORT_CLK, SEG_CLK);
 14c:	67 e0       	ldi	r22, 0x07	; 7
 14e:	8b e2       	ldi	r24, 0x2B	; 43
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORT_DATA, SEG_DATA);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	85 e2       	ldi	r24, 0x25	; 37
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	85 e0       	ldi	r24, 0x05	; 5
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <SEG_update_shift_regs+0x28>
 166:	00 00       	nop
    // Wait 1 us
    _delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	18 c0       	rjmp	.+48     	; 0x19c <SEG_update_shift_regs+0x62>
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        PORT_DATA = ((segments & 1) == 0) ? PORT_DATA & ~(1 << SEG_DATA) : PORT_DATA | (1 << SEG_DATA);
 16c:	d0 fd       	sbrc	r29, 0
 16e:	03 c0       	rjmp	.+6      	; 0x176 <SEG_update_shift_regs+0x3c>
 170:	85 b1       	in	r24, 0x05	; 5
 172:	8e 7f       	andi	r24, 0xFE	; 254
 174:	02 c0       	rjmp	.+4      	; 0x17a <SEG_update_shift_regs+0x40>
 176:	85 b1       	in	r24, 0x05	; 5
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	85 b9       	out	0x05, r24	; 5
        // Shift "segments"
        segments >>= 1;
 17c:	d6 95       	lsr	r29
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	8a 95       	dec	r24
 182:	f1 f7       	brne	.-4      	; 0x180 <SEG_update_shift_regs+0x46>
 184:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        PORT_CLK |= (1 << SEG_CLK);
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	8b b9       	out	0x0b, r24	; 11
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <SEG_update_shift_regs+0x54>
 192:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        PORT_CLK &= ~(1 << SEG_CLK);
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	8f 77       	andi	r24, 0x7F	; 127
 198:	8b b9       	out	0x0b, r24	; 11
    // Wait 1 us
    _delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 19a:	9f 5f       	subi	r25, 0xFF	; 255
 19c:	98 30       	cpi	r25, 0x08	; 8
 19e:	30 f3       	brcs	.-52     	; 0x16c <SEG_update_shift_regs+0x32>
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	18 c0       	rjmp	.+48     	; 0x1d4 <SEG_update_shift_regs+0x9a>
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        PORT_DATA = ((position & 1) == 0) ? PORT_DATA & ~(1 << SEG_DATA) : PORT_DATA | (1 << SEG_DATA);
 1a4:	c0 fd       	sbrc	r28, 0
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <SEG_update_shift_regs+0x74>
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	8e 7f       	andi	r24, 0xFE	; 254
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <SEG_update_shift_regs+0x78>
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	85 b9       	out	0x05, r24	; 5
        // Shift "position"
        position = position >> 1;
 1b4:	c6 95       	lsr	r28
 1b6:	85 e0       	ldi	r24, 0x05	; 5
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <SEG_update_shift_regs+0x7e>
 1bc:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        PORT_CLK |= (1 << SEG_CLK);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <SEG_update_shift_regs+0x8c>
 1ca:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        PORT_CLK &= ~(1 << SEG_CLK);
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	8f 77       	andi	r24, 0x7F	; 127
 1d0:	8b b9       	out	0x0b, r24	; 11
        PORT_CLK &= ~(1 << SEG_CLK);
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1d2:	9f 5f       	subi	r25, 0xFF	; 255
 1d4:	98 30       	cpi	r25, 0x08	; 8
 1d6:	30 f3       	brcs	.-52     	; 0x1a4 <SEG_update_shift_regs+0x6a>
        // Pull CLK low
        PORT_CLK &= ~(1 << SEG_CLK);
    }

    // Pull LATCH high
    PORT_LATCH |= (1 << SEG_LATCH);
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	80 61       	ori	r24, 0x10	; 16
 1dc:	8b b9       	out	0x0b, r24	; 11
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	8a 95       	dec	r24
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <SEG_update_shift_regs+0xa6>
 1e4:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <SEG_clear>:

/**********************************************************************
 * Function: SEG_clear()
 **********************************************************************/
void SEG_clear (void)
{
 1ec:	cf 93       	push	r28
    for (uint8_t i = 0; i < 4; i++)
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
 1f0:	09 c0       	rjmp	.+18     	; 0x204 <SEG_clear+0x18>
        SEG_update_shift_regs(~(uint8_t)0, segment_position[i]);        
 1f2:	ec 2f       	mov	r30, r28
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	e0 50       	subi	r30, 0x00	; 0
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	60 81       	ld	r22, Z
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	0e 94 9d 00 	call	0x13a	; 0x13a <SEG_update_shift_regs>
/**********************************************************************
 * Function: SEG_clear()
 **********************************************************************/
void SEG_clear (void)
{
    for (uint8_t i = 0; i < 4; i++)
 202:	cf 5f       	subi	r28, 0xFF	; 255
 204:	c4 30       	cpi	r28, 0x04	; 4
 206:	a8 f3       	brcs	.-22     	; 0x1f2 <SEG_clear+0x6>
        SEG_update_shift_regs(~(uint8_t)0, segment_position[i]);        
}
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
