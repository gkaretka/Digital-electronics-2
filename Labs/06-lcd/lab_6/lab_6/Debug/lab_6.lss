
lab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000632  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000632  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800144  00800144  0000070a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000070a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001264  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000993  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098c  00000000  00000000  0000242b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fb  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009fd  00000000  00000000  0000347f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003e7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 34       	cpi	r26, 0x49	; 73
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 02 	call	0x564	; 0x564 <main>
  9e:	0c 94 17 03 	jmp	0x62e	; 0x62e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <toggle_e+0x8>
  b2:	00 00       	nop
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <lcd_write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x10>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x16>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x50>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x5a>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x64>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x6e>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x94>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0x9e>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xa8>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb2>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	87 eb       	ldi	r24, 0xB7	; 183
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0xd2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0xd8>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a0:	08 95       	ret

000001a2 <lcd_data>:
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a8:	08 95       	ret

000001aa <lcd_gotoxy>:
 1aa:	61 11       	cpse	r22, r1
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <lcd_gotoxy+0xc>
 1ae:	80 58       	subi	r24, 0x80	; 128
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1b4:	08 95       	ret
 1b6:	80 54       	subi	r24, 0x40	; 64
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1bc:	08 95       	ret

000001be <lcd_clrscr>:
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1c4:	08 95       	ret

000001c6 <lcd_putc>:
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1cc:	08 95       	ret

000001ce <lcd_puts>:
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	fc 01       	movw	r30, r24
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <lcd_puts+0xe>
 1d6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
 1da:	fe 01       	movw	r30, r28
 1dc:	ef 01       	movw	r28, r30
 1de:	21 96       	adiw	r28, 0x01	; 1
 1e0:	80 81       	ld	r24, Z
 1e2:	81 11       	cpse	r24, r1
 1e4:	f8 cf       	rjmp	.-16     	; 0x1d6 <lcd_puts+0x8>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1ec:	cf 93       	push	r28
 1ee:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1f0:	84 b1       	in	r24, 0x04	; 4
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1f6:	8a b1       	in	r24, 0x0a	; 10
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1fc:	84 b1       	in	r24, 0x04	; 4
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 202:	8a b1       	in	r24, 0x0a	; 10
 204:	80 61       	ori	r24, 0x10	; 16
 206:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 208:	8a b1       	in	r24, 0x0a	; 10
 20a:	80 62       	ori	r24, 0x20	; 32
 20c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 20e:	8a b1       	in	r24, 0x0a	; 10
 210:	80 64       	ori	r24, 0x40	; 64
 212:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 214:	8a b1       	in	r24, 0x0a	; 10
 216:	80 68       	ori	r24, 0x80	; 128
 218:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	99 ef       	ldi	r25, 0xF9	; 249
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_init+0x32>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_init+0x38>
 224:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 226:	8b b1       	in	r24, 0x0b	; 11
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	80 61       	ori	r24, 0x10	; 16
 230:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 236:	8f e1       	ldi	r24, 0x1F	; 31
 238:	9e e4       	ldi	r25, 0x4E	; 78
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x4e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x54>
 240:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x5e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x64>
 250:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x6e>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_init+0x74>
 260:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 262:	8b b1       	in	r24, 0x0b	; 11
 264:	8f 7e       	andi	r24, 0xEF	; 239
 266:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 268:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_init+0x84>
 274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_init+0x8a>
 276:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 278:	88 e2       	ldi	r24, 0x28	; 40
 27a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 284:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
}/* lcd_init */
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <__vector_9>:
 * Function: Timer/Counter2 overflow interrupt
 * Purpose:  Update the stopwatch on LCD display every sixth overflow,
 *           ie approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER2_OVF_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	1f 93       	push	r17
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	ef 93       	push	r30
 2be:	ff 93       	push	r31
    static uint8_t number_of_overflows = 0;
    static uint16_t cnt_s = 0;
    static uint16_t cnt_m = 0;
    static int pow10[5] = { 1, 10, 100, 1000, 10000 };
    
    number_of_overflows++;
 2c0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <number_of_overflows.2085>
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <number_of_overflows.2085>
    if (number_of_overflows >= 6)
 2ca:	86 30       	cpi	r24, 0x06	; 6
 2cc:	08 f4       	brcc	.+2      	; 0x2d0 <__vector_9+0x38>
 2ce:	10 c1       	rjmp	.+544    	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 2d0:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <number_of_overflows.2085>
        char to_display;
        
        lcd_gotoxy(1, 0);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
        for (int8_t pos = 1; pos >= 0; pos--) {
 2dc:	c1 e0       	ldi	r28, 0x01	; 1
 2de:	25 c0       	rjmp	.+74     	; 0x32a <__vector_9+0x92>
            to_display = ((cnt_m % pow10[pos+1]) / (pow10[pos])) + '0';
 2e0:	2c 2f       	mov	r18, r28
 2e2:	0c 2e       	mov	r0, r28
 2e4:	00 0c       	add	r0, r0
 2e6:	33 0b       	sbc	r19, r19
 2e8:	f9 01       	movw	r30, r18
 2ea:	31 96       	adiw	r30, 0x01	; 1
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	e7 5c       	subi	r30, 0xC7	; 199
 2f2:	fe 4f       	sbci	r31, 0xFE	; 254
 2f4:	60 81       	ld	r22, Z
 2f6:	71 81       	ldd	r23, Z+1	; 0x01
 2f8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <cnt_m.2087>
 2fc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <cnt_m.2087+0x1>
 300:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodhi4>
 304:	22 0f       	add	r18, r18
 306:	33 1f       	adc	r19, r19
 308:	f9 01       	movw	r30, r18
 30a:	e7 5c       	subi	r30, 0xC7	; 199
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
 30e:	60 81       	ld	r22, Z
 310:	71 81       	ldd	r23, Z+1	; 0x01
 312:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodhi4>
            lcd_putc(to_display);
 316:	80 e3       	ldi	r24, 0x30	; 48
 318:	86 0f       	add	r24, r22
 31a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
            if (pos == 0) lcd_putc(':');
 31e:	c1 11       	cpse	r28, r1
 320:	03 c0       	rjmp	.+6      	; 0x328 <__vector_9+0x90>
 322:	8a e3       	ldi	r24, 0x3A	; 58
 324:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
        char to_display;
        
        lcd_gotoxy(1, 0);
        for (int8_t pos = 1; pos >= 0; pos--) {
 328:	c1 50       	subi	r28, 0x01	; 1
 32a:	cc 23       	and	r28, r28
 32c:	cc f6       	brge	.-78     	; 0x2e0 <__vector_9+0x48>
 32e:	c3 e0       	ldi	r28, 0x03	; 3
 330:	25 c0       	rjmp	.+74     	; 0x37c <__vector_9+0xe4>
            lcd_putc(to_display);
            if (pos == 0) lcd_putc(':');
        }
        
        for (int8_t pos = 3; pos >= 0; pos--) {
            to_display = ((cnt_s % pow10[pos+1]) / (pow10[pos])) + '0';
 332:	2c 2f       	mov	r18, r28
 334:	0c 2e       	mov	r0, r28
 336:	00 0c       	add	r0, r0
 338:	33 0b       	sbc	r19, r19
 33a:	f9 01       	movw	r30, r18
 33c:	31 96       	adiw	r30, 0x01	; 1
 33e:	ee 0f       	add	r30, r30
 340:	ff 1f       	adc	r31, r31
 342:	e7 5c       	subi	r30, 0xC7	; 199
 344:	fe 4f       	sbci	r31, 0xFE	; 254
 346:	60 81       	ld	r22, Z
 348:	71 81       	ldd	r23, Z+1	; 0x01
 34a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 34e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
 352:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodhi4>
 356:	22 0f       	add	r18, r18
 358:	33 1f       	adc	r19, r19
 35a:	f9 01       	movw	r30, r18
 35c:	e7 5c       	subi	r30, 0xC7	; 199
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
 360:	60 81       	ld	r22, Z
 362:	71 81       	ldd	r23, Z+1	; 0x01
 364:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodhi4>
            lcd_putc(to_display);
 368:	80 e3       	ldi	r24, 0x30	; 48
 36a:	86 0f       	add	r24, r22
 36c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
            if (pos == 2) lcd_putc('.');
 370:	c2 30       	cpi	r28, 0x02	; 2
 372:	19 f4       	brne	.+6      	; 0x37a <__vector_9+0xe2>
 374:	8e e2       	ldi	r24, 0x2E	; 46
 376:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
            to_display = ((cnt_m % pow10[pos+1]) / (pow10[pos])) + '0';
            lcd_putc(to_display);
            if (pos == 0) lcd_putc(':');
        }
        
        for (int8_t pos = 3; pos >= 0; pos--) {
 37a:	c1 50       	subi	r28, 0x01	; 1
 37c:	cc 23       	and	r28, r28
 37e:	cc f6       	brge	.-78     	; 0x332 <__vector_9+0x9a>
            to_display = ((cnt_s % pow10[pos+1]) / (pow10[pos])) + '0';
            lcd_putc(to_display);
            if (pos == 2) lcd_putc('.');
        }
         
        lcd_gotoxy(11, 0);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	8b e0       	ldi	r24, 0x0B	; 11
 384:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
        // seconds to power of 2
        uint8_t seconds = ((cnt_s % pow10[4]) / (pow10[3])) * 10 + ((cnt_s % pow10[3]) / (pow10[2]));
 388:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <__data_end>
 38c:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <__data_end+0x1>
 390:	9a 01       	movw	r18, r20
 392:	32 95       	swap	r19
 394:	22 95       	swap	r18
 396:	2f 70       	andi	r18, 0x0F	; 15
 398:	23 27       	eor	r18, r19
 39a:	3f 70       	andi	r19, 0x0F	; 15
 39c:	23 27       	eor	r18, r19
 39e:	a7 e4       	ldi	r26, 0x47	; 71
 3a0:	b3 e0       	ldi	r27, 0x03	; 3
 3a2:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>
 3a6:	96 95       	lsr	r25
 3a8:	87 95       	ror	r24
 3aa:	96 95       	lsr	r25
 3ac:	87 95       	ror	r24
 3ae:	96 95       	lsr	r25
 3b0:	87 95       	ror	r24
 3b2:	60 e1       	ldi	r22, 0x10	; 16
 3b4:	77 e2       	ldi	r23, 0x27	; 39
 3b6:	86 9f       	mul	r24, r22
 3b8:	90 01       	movw	r18, r0
 3ba:	87 9f       	mul	r24, r23
 3bc:	30 0d       	add	r19, r0
 3be:	96 9f       	mul	r25, r22
 3c0:	30 0d       	add	r19, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	ca 01       	movw	r24, r20
 3c6:	82 1b       	sub	r24, r18
 3c8:	93 0b       	sbc	r25, r19
 3ca:	9c 01       	movw	r18, r24
 3cc:	36 95       	lsr	r19
 3ce:	27 95       	ror	r18
 3d0:	36 95       	lsr	r19
 3d2:	27 95       	ror	r18
 3d4:	36 95       	lsr	r19
 3d6:	27 95       	ror	r18
 3d8:	a5 ec       	ldi	r26, 0xC5	; 197
 3da:	b0 e2       	ldi	r27, 0x20	; 32
 3dc:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>
 3e0:	ec 01       	movw	r28, r24
 3e2:	d2 95       	swap	r29
 3e4:	c2 95       	swap	r28
 3e6:	cf 70       	andi	r28, 0x0F	; 15
 3e8:	cd 27       	eor	r28, r29
 3ea:	df 70       	andi	r29, 0x0F	; 15
 3ec:	cd 27       	eor	r28, r29
 3ee:	9a 01       	movw	r18, r20
 3f0:	36 95       	lsr	r19
 3f2:	27 95       	ror	r18
 3f4:	36 95       	lsr	r19
 3f6:	27 95       	ror	r18
 3f8:	36 95       	lsr	r19
 3fa:	27 95       	ror	r18
 3fc:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>
 400:	92 95       	swap	r25
 402:	82 95       	swap	r24
 404:	8f 70       	andi	r24, 0x0F	; 15
 406:	89 27       	eor	r24, r25
 408:	9f 70       	andi	r25, 0x0F	; 15
 40a:	89 27       	eor	r24, r25
 40c:	68 ee       	ldi	r22, 0xE8	; 232
 40e:	73 e0       	ldi	r23, 0x03	; 3
 410:	86 9f       	mul	r24, r22
 412:	90 01       	movw	r18, r0
 414:	87 9f       	mul	r24, r23
 416:	30 0d       	add	r19, r0
 418:	96 9f       	mul	r25, r22
 41a:	30 0d       	add	r19, r0
 41c:	11 24       	eor	r1, r1
 41e:	ca 01       	movw	r24, r20
 420:	82 1b       	sub	r24, r18
 422:	93 0b       	sbc	r25, r19
 424:	9c 01       	movw	r18, r24
 426:	36 95       	lsr	r19
 428:	27 95       	ror	r18
 42a:	36 95       	lsr	r19
 42c:	27 95       	ror	r18
 42e:	ab e7       	ldi	r26, 0x7B	; 123
 430:	b4 e1       	ldi	r27, 0x14	; 20
 432:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>
 436:	96 95       	lsr	r25
 438:	87 95       	ror	r24
 43a:	cc 0f       	add	r28, r28
 43c:	9c 2f       	mov	r25, r28
 43e:	99 0f       	add	r25, r25
 440:	99 0f       	add	r25, r25
 442:	c9 0f       	add	r28, r25
 444:	8c 0f       	add	r24, r28
        uint16_t cnt_s_pow_2 = seconds * seconds;
 446:	88 9f       	mul	r24, r24
 448:	e0 01       	movw	r28, r0
 44a:	11 24       	eor	r1, r1
        for (int8_t pos = 3; pos >= 0; pos--) {
 44c:	13 e0       	ldi	r17, 0x03	; 3
 44e:	1d c0       	rjmp	.+58     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
            to_display = ((cnt_s_pow_2 % pow10[pos+1]) / (pow10[pos])) + '0';
 450:	21 2f       	mov	r18, r17
 452:	01 2e       	mov	r0, r17
 454:	00 0c       	add	r0, r0
 456:	33 0b       	sbc	r19, r19
 458:	f9 01       	movw	r30, r18
 45a:	31 96       	adiw	r30, 0x01	; 1
 45c:	ee 0f       	add	r30, r30
 45e:	ff 1f       	adc	r31, r31
 460:	e7 5c       	subi	r30, 0xC7	; 199
 462:	fe 4f       	sbci	r31, 0xFE	; 254
 464:	60 81       	ld	r22, Z
 466:	71 81       	ldd	r23, Z+1	; 0x01
 468:	ce 01       	movw	r24, r28
 46a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodhi4>
 46e:	22 0f       	add	r18, r18
 470:	33 1f       	adc	r19, r19
 472:	f9 01       	movw	r30, r18
 474:	e7 5c       	subi	r30, 0xC7	; 199
 476:	fe 4f       	sbci	r31, 0xFE	; 254
 478:	60 81       	ld	r22, Z
 47a:	71 81       	ldd	r23, Z+1	; 0x01
 47c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodhi4>
            lcd_putc(to_display);
 480:	80 e3       	ldi	r24, 0x30	; 48
 482:	86 0f       	add	r24, r22
 484:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
         
        lcd_gotoxy(11, 0);
        // seconds to power of 2
        uint8_t seconds = ((cnt_s % pow10[4]) / (pow10[3])) * 10 + ((cnt_s % pow10[3]) / (pow10[2]));
        uint16_t cnt_s_pow_2 = seconds * seconds;
        for (int8_t pos = 3; pos >= 0; pos--) {
 488:	11 50       	subi	r17, 0x01	; 1
 48a:	11 23       	and	r17, r17
 48c:	0c f7       	brge	.-62     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
            to_display = ((cnt_s_pow_2 % pow10[pos+1]) / (pow10[pos])) + '0';
            lcd_putc(to_display);
        }
        
        lcd_gotoxy(1, 1);
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
        lcd_putc('b');
 496:	82 e6       	ldi	r24, 0x62	; 98
 498:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
        lcd_gotoxy(11, 1);
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	8b e0       	ldi	r24, 0x0B	; 11
 4a0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
        lcd_putc('c');
 4a4:	83 e6       	ldi	r24, 0x63	; 99
 4a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
        
        if (cnt_s < 6000) cnt_s += 10;
 4aa:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 4ae:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
 4b2:	80 37       	cpi	r24, 0x70	; 112
 4b4:	27 e1       	ldi	r18, 0x17	; 23
 4b6:	92 07       	cpc	r25, r18
 4b8:	30 f4       	brcc	.+12     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ba:	0a 96       	adiw	r24, 0x0a	; 10
 4bc:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
 4c0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 4c4:	15 c0       	rjmp	.+42     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
        else {
            cnt_s = 0;
 4c6:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__data_end+0x1>
 4ca:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
            if (cnt_m < 60) cnt_m++;
 4ce:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <cnt_m.2087>
 4d2:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <cnt_m.2087+0x1>
 4d6:	8c 33       	cpi	r24, 0x3C	; 60
 4d8:	91 05       	cpc	r25, r1
 4da:	30 f4       	brcc	.+12     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <cnt_m.2087+0x1>
 4e2:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <cnt_m.2087>
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
            else cnt_m = 0;
 4e8:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <cnt_m.2087+0x1>
 4ec:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <cnt_m.2087>
        }            
    }
    // Else do nothing and exit the ISR
}
 4f0:	ff 91       	pop	r31
 4f2:	ef 91       	pop	r30
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	bf 91       	pop	r27
 4fa:	af 91       	pop	r26
 4fc:	9f 91       	pop	r25
 4fe:	8f 91       	pop	r24
 500:	7f 91       	pop	r23
 502:	6f 91       	pop	r22
 504:	5f 91       	pop	r21
 506:	4f 91       	pop	r20
 508:	3f 91       	pop	r19
 50a:	2f 91       	pop	r18
 50c:	1f 91       	pop	r17
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <store_custom_char>:

void store_custom_char(uint8_t addr, uint8_t *custom_char)
{
 518:	0f 93       	push	r16
 51a:	1f 93       	push	r17
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	d8 2f       	mov	r29, r24
 522:	8b 01       	movw	r16, r22
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 524:	8c e0       	ldi	r24, 0x0C	; 12
 526:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>

    // Set pointer to beginning of CGRAM memory
    lcd_command(addr << LCD_CGRAM);
 52a:	8d 2f       	mov	r24, r29
 52c:	82 95       	swap	r24
 52e:	88 0f       	add	r24, r24
 530:	88 0f       	add	r24, r24
 532:	80 7c       	andi	r24, 0xC0	; 192
 534:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    for (uint8_t i = 0; i < 8; i++)
 538:	c0 e0       	ldi	r28, 0x00	; 0
 53a:	0a c0       	rjmp	.+20     	; 0x550 <store_custom_char+0x38>
    {
        // Store all new chars to memory line by line
        lcd_data(custom_char[i+addr]);
 53c:	ed 2f       	mov	r30, r29
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	ec 0f       	add	r30, r28
 542:	f1 1d       	adc	r31, r1
 544:	e0 0f       	add	r30, r16
 546:	f1 1f       	adc	r31, r17
 548:	80 81       	ld	r24, Z
 54a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_data>
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);

    // Set pointer to beginning of CGRAM memory
    lcd_command(addr << LCD_CGRAM);
    for (uint8_t i = 0; i < 8; i++)
 54e:	cf 5f       	subi	r28, 0xFF	; 255
 550:	c8 30       	cpi	r28, 0x08	; 8
 552:	a0 f3       	brcs	.-24     	; 0x53c <store_custom_char+0x24>
    {
        // Store all new chars to memory line by line
        lcd_data(custom_char[i+addr]);
    }
    // Set DDRAM address
    lcd_command(1 << LCD_DDRAM);
 554:	80 e8       	ldi	r24, 0x80	; 128
 556:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	08 95       	ret

00000564 <main>:
void store_custom_char(uint8_t addr, uint8_t *custom_char);

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 564:	8c e0       	ldi	r24, 0x0C	; 12
 566:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>
    
    for (uint8_t i = 0; i < 1; i++) store_custom_char(i, customChars);
 56a:	c0 e0       	ldi	r28, 0x00	; 0
 56c:	06 c0       	rjmp	.+12     	; 0x57a <main+0x16>
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	71 e0       	ldi	r23, 0x01	; 1
 572:	8c 2f       	mov	r24, r28
 574:	0e 94 8c 02 	call	0x518	; 0x518 <store_custom_char>
 578:	cf 5f       	subi	r28, 0xFF	; 255
 57a:	cc 23       	and	r28, r28
 57c:	c1 f3       	breq	.-16     	; 0x56e <main+0xa>
    
    lcd_clrscr();
 57e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
    for (uint8_t i = 0; i < 8; i++) lcd_putc(i);
 582:	c0 e0       	ldi	r28, 0x00	; 0
 584:	04 c0       	rjmp	.+8      	; 0x58e <main+0x2a>
 586:	8c 2f       	mov	r24, r28
 588:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
 58c:	cf 5f       	subi	r28, 0xFF	; 255
 58e:	c8 30       	cpi	r28, 0x08	; 8
 590:	d0 f3       	brcs	.-12     	; 0x586 <main+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 592:	2f ef       	ldi	r18, 0xFF	; 255
 594:	83 ed       	ldi	r24, 0xD3	; 211
 596:	90 e3       	ldi	r25, 0x30	; 48
 598:	21 50       	subi	r18, 0x01	; 1
 59a:	80 40       	sbci	r24, 0x00	; 0
 59c:	90 40       	sbci	r25, 0x00	; 0
 59e:	e1 f7       	brne	.-8      	; 0x598 <main+0x34>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <main+0x3e>
 5a2:	00 00       	nop
    
    _delay_ms(1000);
    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
    lcd_puts("LCD Test");
 5ac:	80 e3       	ldi	r24, 0x30	; 48
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
    lcd_putc('!');
 5b4:	81 e2       	ldi	r24, 0x21	; 33
 5b6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
 5ba:	2f ef       	ldi	r18, 0xFF	; 255
 5bc:	83 ed       	ldi	r24, 0xD3	; 211
 5be:	90 e3       	ldi	r25, 0x30	; 48
 5c0:	21 50       	subi	r18, 0x01	; 1
 5c2:	80 40       	sbci	r24, 0x00	; 0
 5c4:	90 40       	sbci	r25, 0x00	; 0
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <main+0x5c>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <main+0x66>
 5ca:	00 00       	nop
    _delay_ms(1000);
    
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set the overflow prescaler to 16 ms and enable interrupt
    lcd_clrscr();
 5cc:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
    TIM2_overflow_16384us();
 5d0:	e1 eb       	ldi	r30, 0xB1	; 177
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	87 60       	ori	r24, 0x07	; 7
 5d8:	80 83       	st	Z, r24
    TIM2_overflow_interrupt_enable();
 5da:	e0 e7       	ldi	r30, 0x70	; 112
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	81 60       	ori	r24, 0x01	; 1
 5e2:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 5e4:	78 94       	sei
 5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <main+0x82>

000005e8 <__udivmodhi4>:
 5e8:	aa 1b       	sub	r26, r26
 5ea:	bb 1b       	sub	r27, r27
 5ec:	51 e1       	ldi	r21, 0x11	; 17
 5ee:	07 c0       	rjmp	.+14     	; 0x5fe <__udivmodhi4_ep>

000005f0 <__udivmodhi4_loop>:
 5f0:	aa 1f       	adc	r26, r26
 5f2:	bb 1f       	adc	r27, r27
 5f4:	a6 17       	cp	r26, r22
 5f6:	b7 07       	cpc	r27, r23
 5f8:	10 f0       	brcs	.+4      	; 0x5fe <__udivmodhi4_ep>
 5fa:	a6 1b       	sub	r26, r22
 5fc:	b7 0b       	sbc	r27, r23

000005fe <__udivmodhi4_ep>:
 5fe:	88 1f       	adc	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	5a 95       	dec	r21
 604:	a9 f7       	brne	.-22     	; 0x5f0 <__udivmodhi4_loop>
 606:	80 95       	com	r24
 608:	90 95       	com	r25
 60a:	bc 01       	movw	r22, r24
 60c:	cd 01       	movw	r24, r26
 60e:	08 95       	ret

00000610 <__umulhisi3>:
 610:	a2 9f       	mul	r26, r18
 612:	b0 01       	movw	r22, r0
 614:	b3 9f       	mul	r27, r19
 616:	c0 01       	movw	r24, r0
 618:	a3 9f       	mul	r26, r19
 61a:	70 0d       	add	r23, r0
 61c:	81 1d       	adc	r24, r1
 61e:	11 24       	eor	r1, r1
 620:	91 1d       	adc	r25, r1
 622:	b2 9f       	mul	r27, r18
 624:	70 0d       	add	r23, r0
 626:	81 1d       	adc	r24, r1
 628:	11 24       	eor	r1, r1
 62a:	91 1d       	adc	r25, r1
 62c:	08 95       	ret

0000062e <_exit>:
 62e:	f8 94       	cli

00000630 <__stop_program>:
 630:	ff cf       	rjmp	.-2      	; 0x630 <__stop_program>
