
lab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000047e  00000512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800114  00800114  00000526  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000109f  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096a  00000000  00000000  000016e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008bd  00000000  00000000  00002051  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c4  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000831  00000000  00000000  00002f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000037a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 48 01 	call	0x290	; 0x290 <main>
  9e:	0c 94 3d 02 	jmp	0x47a	; 0x47a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <toggle_e+0x8>
  b2:	00 00       	nop
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <lcd_write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x10>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x16>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x50>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x5a>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x64>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x6e>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x94>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0x9e>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xa8>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb2>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	87 eb       	ldi	r24, 0xB7	; 183
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0xd2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0xd8>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a0:	08 95       	ret

000001a2 <lcd_gotoxy>:
 1a2:	61 11       	cpse	r22, r1
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <lcd_gotoxy+0xc>
 1a6:	80 58       	subi	r24, 0x80	; 128
 1a8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1ac:	08 95       	ret
 1ae:	80 54       	subi	r24, 0x40	; 64
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1b4:	08 95       	ret

000001b6 <lcd_clrscr>:
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1bc:	08 95       	ret

000001be <lcd_putc>:
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1c4:	08 95       	ret

000001c6 <lcd_puts>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	fc 01       	movw	r30, r24
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <lcd_puts+0xe>
 1ce:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
 1d2:	fe 01       	movw	r30, r28
 1d4:	ef 01       	movw	r28, r30
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	80 81       	ld	r24, Z
 1da:	81 11       	cpse	r24, r1
 1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <lcd_puts+0x8>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	80 62       	ori	r24, 0x20	; 32
 1f2:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f4:	84 b1       	in	r24, 0x04	; 4
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 200:	8a b1       	in	r24, 0x0a	; 10
 202:	80 62       	ori	r24, 0x20	; 32
 204:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 206:	8a b1       	in	r24, 0x0a	; 10
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 20c:	8a b1       	in	r24, 0x0a	; 10
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	99 ef       	ldi	r25, 0xF9	; 249
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x32>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x38>
 21c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	80 62       	ori	r24, 0x20	; 32
 222:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	80 61       	ori	r24, 0x10	; 16
 228:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 22a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 22e:	8f e1       	ldi	r24, 0x1F	; 31
 230:	9e e4       	ldi	r25, 0x4E	; 78
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x4e>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x54>
 238:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init+0x5e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_init+0x64>
 248:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x6e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x74>
 258:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	8f 7e       	andi	r24, 0xEF	; 239
 25e:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x84>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x8a>
 26e:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 27c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
}/* lcd_init */
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_init>

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
    lcd_puts("LCD Test");
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_putc('!');
 2a6:	81 e2       	ldi	r24, 0x21	; 33
 2a8:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	2f ef       	ldi	r18, 0xFF	; 255
 2ae:	83 ed       	ldi	r24, 0xD3	; 211
 2b0:	90 e3       	ldi	r25, 0x30	; 48
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0x22>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x2c>
 2bc:	00 00       	nop
    _delay_ms(1000);
    
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set the overflow prescaler to 16 ms and enable interrupt
    lcd_clrscr();
 2be:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>
    TIM2_overflow_16384us();
 2c2:	e1 eb       	ldi	r30, 0xB1	; 177
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	87 60       	ori	r24, 0x07	; 7
 2ca:	80 83       	st	Z, r24
    TIM2_overflow_interrupt_enable();
 2cc:	e0 e7       	ldi	r30, 0x70	; 112
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 2d6:	78 94       	sei
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <main+0x48>

000002da <__vector_9>:
 * Function: Timer/Counter2 overflow interrupt
 * Purpose:  Update the stopwatch on LCD display every sixth overflow,
 *           ie approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER2_OVF_vect)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	cf 93       	push	r28
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
    static uint8_t number_of_overflows = 0;
    static uint16_t cnt_s = 0;
    static uint16_t cnt_m = 0;
    static int pow10[5] = { 1, 10, 100, 1000, 10000 };
    
    number_of_overflows++;
 2fe:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <number_of_overflows.2073>
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <number_of_overflows.2073>
    if (number_of_overflows >= 6)
 308:	86 30       	cpi	r24, 0x06	; 6
 30a:	08 f4       	brcc	.+2      	; 0x30e <__vector_9+0x34>
 30c:	90 c0       	rjmp	.+288    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 30e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <number_of_overflows.2073>
        char to_display;
        
        lcd_gotoxy(1, 0);
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
        for (int8_t pos = 1; pos >= 0; pos--) {
 31a:	c1 e0       	ldi	r28, 0x01	; 1
 31c:	25 c0       	rjmp	.+74     	; 0x368 <__vector_9+0x8e>
            to_display = ((cnt_m % pow10[pos+1]) / (pow10[pos])) + '0';
 31e:	2c 2f       	mov	r18, r28
 320:	0c 2e       	mov	r0, r28
 322:	00 0c       	add	r0, r0
 324:	33 0b       	sbc	r19, r19
 326:	f9 01       	movw	r30, r18
 328:	31 96       	adiw	r30, 0x01	; 1
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	e7 5f       	subi	r30, 0xF7	; 247
 330:	fe 4f       	sbci	r31, 0xFE	; 254
 332:	60 81       	ld	r22, Z
 334:	71 81       	ldd	r23, Z+1	; 0x01
 336:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cnt_m.2075>
 33a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cnt_m.2075+0x1>
 33e:	0e 94 29 02 	call	0x452	; 0x452 <__udivmodhi4>
 342:	22 0f       	add	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	f9 01       	movw	r30, r18
 348:	e7 5f       	subi	r30, 0xF7	; 247
 34a:	fe 4f       	sbci	r31, 0xFE	; 254
 34c:	60 81       	ld	r22, Z
 34e:	71 81       	ldd	r23, Z+1	; 0x01
 350:	0e 94 29 02 	call	0x452	; 0x452 <__udivmodhi4>
            lcd_putc(to_display);
 354:	80 e3       	ldi	r24, 0x30	; 48
 356:	86 0f       	add	r24, r22
 358:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
            if (pos == 0) lcd_putc(':');
 35c:	c1 11       	cpse	r28, r1
 35e:	03 c0       	rjmp	.+6      	; 0x366 <__vector_9+0x8c>
 360:	8a e3       	ldi	r24, 0x3A	; 58
 362:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
        char to_display;
        
        lcd_gotoxy(1, 0);
        for (int8_t pos = 1; pos >= 0; pos--) {
 366:	c1 50       	subi	r28, 0x01	; 1
 368:	cc 23       	and	r28, r28
 36a:	cc f6       	brge	.-78     	; 0x31e <__vector_9+0x44>
 36c:	c3 e0       	ldi	r28, 0x03	; 3
 36e:	25 c0       	rjmp	.+74     	; 0x3ba <__vector_9+0xe0>
            lcd_putc(to_display);
            if (pos == 0) lcd_putc(':');
        }
        
        for (int8_t pos = 3; pos >= 1; pos--) {
            to_display = ((cnt_s % pow10[pos+1]) / (pow10[pos])) + '0';
 370:	2c 2f       	mov	r18, r28
 372:	0c 2e       	mov	r0, r28
 374:	00 0c       	add	r0, r0
 376:	33 0b       	sbc	r19, r19
 378:	f9 01       	movw	r30, r18
 37a:	31 96       	adiw	r30, 0x01	; 1
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	e7 5f       	subi	r30, 0xF7	; 247
 382:	fe 4f       	sbci	r31, 0xFE	; 254
 384:	60 81       	ld	r22, Z
 386:	71 81       	ldd	r23, Z+1	; 0x01
 388:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 38c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 390:	0e 94 29 02 	call	0x452	; 0x452 <__udivmodhi4>
 394:	22 0f       	add	r18, r18
 396:	33 1f       	adc	r19, r19
 398:	f9 01       	movw	r30, r18
 39a:	e7 5f       	subi	r30, 0xF7	; 247
 39c:	fe 4f       	sbci	r31, 0xFE	; 254
 39e:	60 81       	ld	r22, Z
 3a0:	71 81       	ldd	r23, Z+1	; 0x01
 3a2:	0e 94 29 02 	call	0x452	; 0x452 <__udivmodhi4>
            lcd_putc(to_display);
 3a6:	80 e3       	ldi	r24, 0x30	; 48
 3a8:	86 0f       	add	r24, r22
 3aa:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
            if (pos == 2) lcd_putc('.');
 3ae:	c2 30       	cpi	r28, 0x02	; 2
 3b0:	19 f4       	brne	.+6      	; 0x3b8 <__vector_9+0xde>
 3b2:	8e e2       	ldi	r24, 0x2E	; 46
 3b4:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
            to_display = ((cnt_m % pow10[pos+1]) / (pow10[pos])) + '0';
            lcd_putc(to_display);
            if (pos == 0) lcd_putc(':');
        }
        
        for (int8_t pos = 3; pos >= 1; pos--) {
 3b8:	c1 50       	subi	r28, 0x01	; 1
 3ba:	1c 16       	cp	r1, r28
 3bc:	cc f2       	brlt	.-78     	; 0x370 <__vector_9+0x96>
            to_display = ((cnt_s % pow10[pos+1]) / (pow10[pos])) + '0';
            lcd_putc(to_display);
            if (pos == 2) lcd_putc('.');
        }
         
        lcd_gotoxy(11, 0);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	8b e0       	ldi	r24, 0x0B	; 11
 3c2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
        lcd_putc('a');
 3c6:	81 e6       	ldi	r24, 0x61	; 97
 3c8:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
        lcd_gotoxy(1, 1);
 3cc:	61 e0       	ldi	r22, 0x01	; 1
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
        lcd_putc('b');
 3d4:	82 e6       	ldi	r24, 0x62	; 98
 3d6:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
        lcd_gotoxy(11, 1);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	8b e0       	ldi	r24, 0x0B	; 11
 3de:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
        lcd_putc('c');
 3e2:	83 e6       	ldi	r24, 0x63	; 99
 3e4:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
        
        if (cnt_s < 6000) cnt_s += 10;
 3e8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 3ec:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 3f0:	80 37       	cpi	r24, 0x70	; 112
 3f2:	27 e1       	ldi	r18, 0x17	; 23
 3f4:	92 07       	cpc	r25, r18
 3f6:	30 f4       	brcc	.+12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f8:	0a 96       	adiw	r24, 0x0a	; 10
 3fa:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 3fe:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 402:	15 c0       	rjmp	.+42     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
        else {
            cnt_s = 0;
 404:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 408:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
            if (cnt_m < 60) cnt_m++;
 40c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cnt_m.2075>
 410:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cnt_m.2075+0x1>
 414:	8c 33       	cpi	r24, 0x3C	; 60
 416:	91 05       	cpc	r25, r1
 418:	30 f4       	brcc	.+12     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <cnt_m.2075+0x1>
 420:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <cnt_m.2075>
 424:	04 c0       	rjmp	.+8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
            else cnt_m = 0;
 426:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cnt_m.2075+0x1>
 42a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cnt_m.2075>
        }            
    }
    // Else do nothing and exit the ISR
 42e:	ff 91       	pop	r31
 430:	ef 91       	pop	r30
 432:	cf 91       	pop	r28
 434:	bf 91       	pop	r27
 436:	af 91       	pop	r26
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	7f 91       	pop	r23
 43e:	6f 91       	pop	r22
 440:	5f 91       	pop	r21
 442:	4f 91       	pop	r20
 444:	3f 91       	pop	r19
 446:	2f 91       	pop	r18
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <__udivmodhi4>:
 452:	aa 1b       	sub	r26, r26
 454:	bb 1b       	sub	r27, r27
 456:	51 e1       	ldi	r21, 0x11	; 17
 458:	07 c0       	rjmp	.+14     	; 0x468 <__udivmodhi4_ep>

0000045a <__udivmodhi4_loop>:
 45a:	aa 1f       	adc	r26, r26
 45c:	bb 1f       	adc	r27, r27
 45e:	a6 17       	cp	r26, r22
 460:	b7 07       	cpc	r27, r23
 462:	10 f0       	brcs	.+4      	; 0x468 <__udivmodhi4_ep>
 464:	a6 1b       	sub	r26, r22
 466:	b7 0b       	sbc	r27, r23

00000468 <__udivmodhi4_ep>:
 468:	88 1f       	adc	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	5a 95       	dec	r21
 46e:	a9 f7       	brne	.-22     	; 0x45a <__udivmodhi4_loop>
 470:	80 95       	com	r24
 472:	90 95       	com	r25
 474:	bc 01       	movw	r22, r24
 476:	cd 01       	movw	r24, r26
 478:	08 95       	ret

0000047a <_exit>:
 47a:	f8 94       	cli

0000047c <__stop_program>:
 47c:	ff cf       	rjmp	.-2      	; 0x47c <__stop_program>
