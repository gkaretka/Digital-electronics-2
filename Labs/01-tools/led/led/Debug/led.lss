
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  0000022c  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a7  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072f  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c8  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000018ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000439  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b5  00000000  00000000  00001d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3a       	cpi	r26, 0xAC	; 172
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  8e:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <send_space>:
/*
 * Low level send space by manipulating pin and delaying
 */
void send_space(void)
{
    PORTB &= ~(1 << LED_GREEN);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	8f 7d       	andi	r24, 0xDF	; 223
  9a:	85 b9       	out	0x05, r24	; 5
    DDRD &= ~(1 << DDD3);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	87 7f       	andi	r24, 0xF7	; 247
  a0:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	8d e3       	ldi	r24, 0x3D	; 61
  a6:	99 e4       	ldi	r25, 0x49	; 73
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <send_space+0x12>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <send_space+0x1c>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <send_comma>:
/*
 * Low level send comma by manipulating pin and delaying
 */
void send_comma(void)
{
    PORTB |= (1 << LED_GREEN);
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	85 b9       	out	0x05, r24	; 5
    DDRD |= (1 << DDD3);
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	8a b9       	out	0x0a, r24	; 10
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	8d e3       	ldi	r24, 0x3D	; 61
  c6:	99 e4       	ldi	r25, 0x49	; 73
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <send_comma+0x12>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <send_comma+0x1c>
  d2:	00 00       	nop
    _delay_ms(COMMA_DELAY);
    
    PORTB &= ~(1 << LED_GREEN);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	85 b9       	out	0x05, r24	; 5
    DDRD &= ~(1 << DDD3);
  da:	8a b1       	in	r24, 0x0a	; 10
  dc:	87 7f       	andi	r24, 0xF7	; 247
  de:	8a b9       	out	0x0a, r24	; 10
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	89 e6       	ldi	r24, 0x69	; 105
  e4:	98 e1       	ldi	r25, 0x18	; 24
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <send_comma+0x30>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <send_comma+0x3a>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <send_dot>:
/*
 * Low level send dot by manipulating pin and delaying
 */
void send_dot(void)
{
    PORTB |= (1 << LED_GREEN);
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	85 b9       	out	0x05, r24	; 5
    DDRD |= (1 << DDD3);
  fa:	8a b1       	in	r24, 0x0a	; 10
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	8a b9       	out	0x0a, r24	; 10
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	89 e6       	ldi	r24, 0x69	; 105
 104:	98 e1       	ldi	r25, 0x18	; 24
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <send_dot+0x12>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <send_dot+0x1c>
 110:	00 00       	nop
    _delay_ms(DOT_DELAY);
    
    PORTB &= ~(1 << LED_GREEN);
 112:	85 b1       	in	r24, 0x05	; 5
 114:	8f 7d       	andi	r24, 0xDF	; 223
 116:	85 b9       	out	0x05, r24	; 5
    DDRD &= ~(1 << DDD3);
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	87 7f       	andi	r24, 0xF7	; 247
 11c:	8a b9       	out	0x0a, r24	; 10
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	89 e6       	ldi	r24, 0x69	; 105
 122:	98 e1       	ldi	r25, 0x18	; 24
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <send_dot+0x30>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <send_dot+0x3a>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <ll_display_char_in_morse_code>:
/*
 * Low level function for Morse code display, check one by one char and 
 * performs action accordingly by sending COMMA or DOT
 */
void ll_display_char_in_morse_code(char *char_codes)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
    char *msg_ptr = char_codes;
    while(*msg_ptr != '\0') {
 138:	0a c0       	rjmp	.+20     	; 0x14e <ll_display_char_in_morse_code+0x1c>
        if (*msg_ptr == COMMA) send_comma();
 13a:	8d 32       	cpi	r24, 0x2D	; 45
 13c:	19 f4       	brne	.+6      	; 0x144 <ll_display_char_in_morse_code+0x12>
 13e:	0e 94 5b 00 	call	0xb6	; 0xb6 <send_comma>
 142:	04 c0       	rjmp	.+8      	; 0x14c <ll_display_char_in_morse_code+0x1a>
        else if (*msg_ptr == DOT) send_dot();
 144:	8e 32       	cpi	r24, 0x2E	; 46
 146:	11 f4       	brne	.+4      	; 0x14c <ll_display_char_in_morse_code+0x1a>
 148:	0e 94 7a 00 	call	0xf4	; 0xf4 <send_dot>

        msg_ptr++;
 14c:	21 96       	adiw	r28, 0x01	; 1
 * performs action accordingly by sending COMMA or DOT
 */
void ll_display_char_in_morse_code(char *char_codes)
{
    char *msg_ptr = char_codes;
    while(*msg_ptr != '\0') {
 14e:	88 81       	ld	r24, Y
 150:	81 11       	cpse	r24, r1
 152:	f3 cf       	rjmp	.-26     	; 0x13a <ll_display_char_in_morse_code+0x8>
        if (*msg_ptr == COMMA) send_comma();
        else if (*msg_ptr == DOT) send_dot();

        msg_ptr++;
    }        
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <display_char_in_morse_code>:
/*
 * Look-up table for characters in Morse code alphabet/numbers. 
 */
void display_char_in_morse_code(char c)
{
    if (c >= 65 && c <= 95) { // if char is ASCII A-Z
 15a:	9f eb       	ldi	r25, 0xBF	; 191
 15c:	98 0f       	add	r25, r24
 15e:	9f 31       	cpi	r25, 0x1F	; 31
 160:	68 f4       	brcc	.+26     	; 0x17c <display_char_in_morse_code+0x22>
        ll_display_char_in_morse_code(morse_alphabet[(uint8_t)c - 65]);
 162:	e8 2f       	mov	r30, r24
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e1 54       	subi	r30, 0x41	; 65
 168:	f1 09       	sbc	r31, r1
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	ec 5e       	subi	r30, 0xEC	; 236
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	80 81       	ld	r24, Z
 174:	91 81       	ldd	r25, Z+1	; 0x01
 176:	0e 94 99 00 	call	0x132	; 0x132 <ll_display_char_in_morse_code>
 17a:	08 95       	ret
    } else if (c >= 97 && c <= 122) { // if char is ASCII a-z
 17c:	9f e9       	ldi	r25, 0x9F	; 159
 17e:	98 0f       	add	r25, r24
 180:	9a 31       	cpi	r25, 0x1A	; 26
 182:	68 f4       	brcc	.+26     	; 0x19e <display_char_in_morse_code+0x44>
        ll_display_char_in_morse_code(morse_alphabet[(uint8_t)c - 97]);
 184:	e8 2f       	mov	r30, r24
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	e1 56       	subi	r30, 0x61	; 97
 18a:	f1 09       	sbc	r31, r1
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	ec 5e       	subi	r30, 0xEC	; 236
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	80 81       	ld	r24, Z
 196:	91 81       	ldd	r25, Z+1	; 0x01
 198:	0e 94 99 00 	call	0x132	; 0x132 <ll_display_char_in_morse_code>
 19c:	08 95       	ret
    } else if (c >= 48 && c <= 57) { // if char is ASCII 0-9
 19e:	90 ed       	ldi	r25, 0xD0	; 208
 1a0:	98 0f       	add	r25, r24
 1a2:	9a 30       	cpi	r25, 0x0A	; 10
 1a4:	58 f4       	brcc	.+22     	; 0x1bc <display_char_in_morse_code+0x62>
        ll_display_char_in_morse_code(morse_numbers[(uint8_t)c - 48]);
 1a6:	e8 2f       	mov	r30, r24
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	f0 97       	sbiw	r30, 0x30	; 48
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	e0 50       	subi	r30, 0x00	; 0
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	80 81       	ld	r24, Z
 1b6:	91 81       	ldd	r25, Z+1	; 0x01
 1b8:	0e 94 99 00 	call	0x132	; 0x132 <ll_display_char_in_morse_code>
 1bc:	08 95       	ret

000001be <dispaly_message_morse_code>:

/*
 * Takes *char(string) as input and separates it into individual characters.
 */
void dispaly_message_morse_code(char *msg)
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	ec 01       	movw	r28, r24
    char *msg_ptr = msg;
    while(*msg_ptr != '\0') {
 1c4:	0a c0       	rjmp	.+20     	; 0x1da <dispaly_message_morse_code+0x1c>
        if (*msg_ptr == '/') {
 1c6:	8f 32       	cpi	r24, 0x2F	; 47
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <dispaly_message_morse_code+0x12>
            send_space(); 
 1ca:	0e 94 4b 00 	call	0x96	; 0x96 <send_space>
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <dispaly_message_morse_code+0x1a>
        } else {
            display_char_in_morse_code(*msg_ptr);
 1d0:	0e 94 ad 00 	call	0x15a	; 0x15a <display_char_in_morse_code>
            send_space(); 
 1d4:	0e 94 4b 00 	call	0x96	; 0x96 <send_space>
        }                
        msg_ptr++;
 1d8:	21 96       	adiw	r28, 0x01	; 1
 * Takes *char(string) as input and separates it into individual characters.
 */
void dispaly_message_morse_code(char *msg)
{
    char *msg_ptr = msg;
    while(*msg_ptr != '\0') {
 1da:	88 81       	ld	r24, Y
 1dc:	81 11       	cpse	r24, r1
 1de:	f3 cf       	rjmp	.-26     	; 0x1c6 <dispaly_message_morse_code+0x8>
            display_char_in_morse_code(*msg_ptr);
            send_space(); 
        }                
        msg_ptr++;
    }
}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <main>:

int main(void)
{
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000
    DDRB = DDRB | (1<<LED_GREEN);
 1e6:	84 b1       	in	r24, 0x04	; 4
 1e8:	80 62       	ori	r24, 0x20	; 32
 1ea:	84 b9       	out	0x04, r24	; 4

    // Set pin LOW in Data Register (LED off)
    // PORTB = PORTB and 1101 1111
    PORTB = PORTB & ~(1<<LED_GREEN);
 1ec:	85 b1       	in	r24, 0x05	; 5
 1ee:	8f 7d       	andi	r24, 0xDF	; 223
 1f0:	85 b9       	out	0x05, r24	; 5

    // PB1 as input (for now)
    DDRD &= ~(1 << DDD3);
 1f2:	8a b1       	in	r24, 0x0a	; 10
 1f4:	87 7f       	andi	r24, 0xF7	; 247
 1f6:	8a b9       	out	0x0a, r24	; 10
    // set PWM for 50% duty cycle at 10bit
    OCR1A = 0x01FF;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 200:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    TCCR1A |= (1 << COM1A1);
 204:	e0 e8       	ldi	r30, 0x80	; 128
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	80 68       	ori	r24, 0x80	; 128
 20c:	80 83       	st	Z, r24
    // set non-inverting mode
    TCCR1A |= (1 << WGM11) | (1 << WGM10);
 20e:	80 81       	ld	r24, Z
 210:	83 60       	ori	r24, 0x03	; 3
 212:	80 83       	st	Z, r24
    // set 10bit phase corrected PWM Mode
    TCCR1B |= (1 << CS11);
 214:	e1 e8       	ldi	r30, 0x81	; 129
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	82 60       	ori	r24, 0x02	; 2
 21c:	80 83       	st	Z, r24
         * DE2/
         * de2/
         */
        
        char *msg = "DE2/";
        dispaly_message_morse_code(msg);
 21e:	88 e4       	ldi	r24, 0x48	; 72
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 df 00 	call	0x1be	; 0x1be <dispaly_message_morse_code>
 226:	fb cf       	rjmp	.-10     	; 0x21e <main+0x38>

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
