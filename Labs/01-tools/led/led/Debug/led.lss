
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  000001de  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000977  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000720  00000000  00000000  00000d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037a  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000430  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b5  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001f55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3a       	cpi	r26, 0xAC	; 172
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  8e:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <send_space>:
    }        
}

void send_space(void)
{
    PORTB &= ~(1 << LED_GREEN);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	8f 7d       	andi	r24, 0xDF	; 223
  9a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	8e e9       	ldi	r24, 0x9E	; 158
  a0:	94 e2       	ldi	r25, 0x24	; 36
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <send_space+0xc>
  aa:	00 c0       	rjmp	.+0      	; 0xac <send_space+0x16>
  ac:	00 00       	nop
  ae:	08 95       	ret

000000b0 <send_comma>:
    _delay_ms(SPACE_DELAY);
}

void send_comma(void)
{
    PORTB |= (1 << LED_GREEN);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	8e e9       	ldi	r24, 0x9E	; 158
  ba:	94 e2       	ldi	r25, 0x24	; 36
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <send_comma+0xc>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <send_comma+0x16>
  c6:	00 00       	nop
    _delay_ms(COMMA_DELAY);
    PORTB &= ~(1 << LED_GREEN);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	8f 7d       	andi	r24, 0xDF	; 223
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	84 e3       	ldi	r24, 0x34	; 52
  d2:	9c e0       	ldi	r25, 0x0C	; 12
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <send_comma+0x24>
  dc:	00 c0       	rjmp	.+0      	; 0xde <send_comma+0x2e>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <send_dot>:
    _delay_ms(ONE_SPACE);
}

void send_dot(void)
{
    PORTB |= (1 << LED_GREEN);
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	85 b9       	out	0x05, r24	; 5
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	84 e3       	ldi	r24, 0x34	; 52
  ec:	9c e0       	ldi	r25, 0x0C	; 12
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <send_dot+0xc>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <send_dot+0x16>
  f8:	00 00       	nop
    _delay_ms(DOT_DELAY);
    PORTB &= ~(1 << LED_GREEN);
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	8f 7d       	andi	r24, 0xDF	; 223
  fe:	85 b9       	out	0x05, r24	; 5
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	84 e3       	ldi	r24, 0x34	; 52
 104:	9c e0       	ldi	r25, 0x0C	; 12
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <send_dot+0x24>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <send_dot+0x2e>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <ll_display_char_in_morse_code>:
        ll_display_char_in_morse_code(morse_numbers[(uint8_t)c - 48]);
    }
}

void ll_display_char_in_morse_code(char *char_codes)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
    char *msg_ptr = char_codes;
    while(*msg_ptr != '\0') {
 11a:	0a c0       	rjmp	.+20     	; 0x130 <ll_display_char_in_morse_code+0x1c>
        if (*msg_ptr == COMMA)
 11c:	8d 32       	cpi	r24, 0x2D	; 45
 11e:	19 f4       	brne	.+6      	; 0x126 <ll_display_char_in_morse_code+0x12>
            send_comma();
 120:	0e 94 58 00 	call	0xb0	; 0xb0 <send_comma>
 124:	04 c0       	rjmp	.+8      	; 0x12e <ll_display_char_in_morse_code+0x1a>
        else if (*msg_ptr == DOT)
 126:	8e 32       	cpi	r24, 0x2E	; 46
 128:	11 f4       	brne	.+4      	; 0x12e <ll_display_char_in_morse_code+0x1a>
            send_dot();
 12a:	0e 94 71 00 	call	0xe2	; 0xe2 <send_dot>
        msg_ptr++;
 12e:	21 96       	adiw	r28, 0x01	; 1
}

void ll_display_char_in_morse_code(char *char_codes)
{
    char *msg_ptr = char_codes;
    while(*msg_ptr != '\0') {
 130:	88 81       	ld	r24, Y
 132:	81 11       	cpse	r24, r1
 134:	f3 cf       	rjmp	.-26     	; 0x11c <ll_display_char_in_morse_code+0x8>
            send_comma();
        else if (*msg_ptr == DOT)
            send_dot();
        msg_ptr++;
    }        
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <display_char_in_morse_code>:
    }
}

void display_char_in_morse_code(char c)
{
    if (c >= 65 && c <= 95) {
 13c:	9f eb       	ldi	r25, 0xBF	; 191
 13e:	98 0f       	add	r25, r24
 140:	9f 31       	cpi	r25, 0x1F	; 31
 142:	68 f4       	brcc	.+26     	; 0x15e <display_char_in_morse_code+0x22>
        ll_display_char_in_morse_code(morse_alphabet[(uint8_t)c - 65]);
 144:	e8 2f       	mov	r30, r24
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	e1 54       	subi	r30, 0x41	; 65
 14a:	f1 09       	sbc	r31, r1
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	ec 5e       	subi	r30, 0xEC	; 236
 152:	fe 4f       	sbci	r31, 0xFE	; 254
 154:	80 81       	ld	r24, Z
 156:	91 81       	ldd	r25, Z+1	; 0x01
 158:	0e 94 8a 00 	call	0x114	; 0x114 <ll_display_char_in_morse_code>
 15c:	08 95       	ret
    } else if (c >= 97 && c <= 122) {
 15e:	9f e9       	ldi	r25, 0x9F	; 159
 160:	98 0f       	add	r25, r24
 162:	9a 31       	cpi	r25, 0x1A	; 26
 164:	68 f4       	brcc	.+26     	; 0x180 <display_char_in_morse_code+0x44>
        ll_display_char_in_morse_code(morse_alphabet[(uint8_t)c - 97]);
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	e1 56       	subi	r30, 0x61	; 97
 16c:	f1 09       	sbc	r31, r1
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	ec 5e       	subi	r30, 0xEC	; 236
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	80 81       	ld	r24, Z
 178:	91 81       	ldd	r25, Z+1	; 0x01
 17a:	0e 94 8a 00 	call	0x114	; 0x114 <ll_display_char_in_morse_code>
 17e:	08 95       	ret
    } else if (c >= 48 && c <= 57) {
 180:	90 ed       	ldi	r25, 0xD0	; 208
 182:	98 0f       	add	r25, r24
 184:	9a 30       	cpi	r25, 0x0A	; 10
 186:	58 f4       	brcc	.+22     	; 0x19e <display_char_in_morse_code+0x62>
        ll_display_char_in_morse_code(morse_numbers[(uint8_t)c - 48]);
 188:	e8 2f       	mov	r30, r24
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	f0 97       	sbiw	r30, 0x30	; 48
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	e0 50       	subi	r30, 0x00	; 0
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	80 81       	ld	r24, Z
 198:	91 81       	ldd	r25, Z+1	; 0x01
 19a:	0e 94 8a 00 	call	0x114	; 0x114 <ll_display_char_in_morse_code>
 19e:	08 95       	ret

000001a0 <dispaly_message_morse_code>:
    // Will never reach this
    return 0;
}

void dispaly_message_morse_code(char *msg)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
    char *msg_ptr = msg;
    while(*msg_ptr != '\0') {
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <dispaly_message_morse_code+0x18>
        if (*msg_ptr == '/') {
 1a8:	8f 32       	cpi	r24, 0x2F	; 47
 1aa:	19 f4       	brne	.+6      	; 0x1b2 <dispaly_message_morse_code+0x12>
            send_space(); 
 1ac:	0e 94 4b 00 	call	0x96	; 0x96 <send_space>
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <dispaly_message_morse_code+0x16>
        } else {
            display_char_in_morse_code(*msg_ptr);
 1b2:	0e 94 9e 00 	call	0x13c	; 0x13c <display_char_in_morse_code>
        }                
        msg_ptr++;
 1b6:	21 96       	adiw	r28, 0x01	; 1
}

void dispaly_message_morse_code(char *msg)
{
    char *msg_ptr = msg;
    while(*msg_ptr != '\0') {
 1b8:	88 81       	ld	r24, Y
 1ba:	81 11       	cpse	r24, r1
 1bc:	f5 cf       	rjmp	.-22     	; 0x1a8 <dispaly_message_morse_code+0x8>
        } else {
            display_char_in_morse_code(*msg_ptr);
        }                
        msg_ptr++;
    }
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <main>:

int main(void)
{
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000
    DDRB = DDRB | (1<<LED_GREEN);
 1c4:	84 b1       	in	r24, 0x04	; 4
 1c6:	80 62       	ori	r24, 0x20	; 32
 1c8:	84 b9       	out	0x04, r24	; 4

    // Set pin LOW in Data Register (LED off)
    // PORTB = PORTB and 1101 1111
    PORTB = PORTB & ~(1<<LED_GREEN);
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	8f 7d       	andi	r24, 0xDF	; 223
 1ce:	85 b9       	out	0x05, r24	; 5

    // Infinite loop
    while (1)
    {
        dispaly_message_morse_code("DE2/");
 1d0:	88 e4       	ldi	r24, 0x48	; 72
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <dispaly_message_morse_code>
 1d8:	fb cf       	rjmp	.-10     	; 0x1d0 <main+0xc>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
