
led_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a79  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ce  00000000  00000000  00000dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048b  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dc  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e1  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002239  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 * Purpose:  Toggle two LEDs when a push button is pressed.
 * Returns:  none
 **********************************************************************/
int main(void)
{
    LED_DDR |= ((1 << LED4) | (1 << LED3)  | (1 << LED2) | (1 << LED1) | (1 << LED0)); // led outputs
  80:	87 b1       	in	r24, 0x07	; 7
  82:	8f 61       	ori	r24, 0x1F	; 31
  84:	87 b9       	out	0x07, r24	; 7
    BUTTON_DDR &= ~(1 << BUTTON); // buttons
  86:	84 b1       	in	r24, 0x04	; 4
  88:	8d 7f       	andi	r24, 0xFD	; 253
  8a:	84 b9       	out	0x04, r24	; 4
    
    uint8_t register_storage = 0;
    uint8_t sample_data = 0;
    uint8_t start = 0;
    uint8_t perform = 0;
  8c:	20 e0       	ldi	r18, 0x00	; 0
    LED_DDR |= ((1 << LED4) | (1 << LED3)  | (1 << LED2) | (1 << LED1) | (1 << LED0)); // led outputs
    BUTTON_DDR &= ~(1 << BUTTON); // buttons
    
    uint8_t register_storage = 0;
    uint8_t sample_data = 0;
    uint8_t start = 0;
  8e:	80 e0       	ldi	r24, 0x00	; 0
{
    LED_DDR |= ((1 << LED4) | (1 << LED3)  | (1 << LED2) | (1 << LED1) | (1 << LED0)); // led outputs
    BUTTON_DDR &= ~(1 << BUTTON); // buttons
    
    uint8_t register_storage = 0;
    uint8_t sample_data = 0;
  90:	e0 e0       	ldi	r30, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	0f ef       	ldi	r16, 0xFF	; 255
  94:	10 e7       	ldi	r17, 0x70	; 112
  96:	32 e0       	ldi	r19, 0x02	; 2
  98:	01 50       	subi	r16, 0x01	; 1
  9a:	10 40       	sbci	r17, 0x00	; 0
  9c:	30 40       	sbci	r19, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x18>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x22>
  a2:	00 00       	nop
    // Infinite loop
    while (1)
    {
        // shift register sampler, edge detector
        _delay_ms(50);
        sample_data = (sample_data << 1) | ((((BUTTON_PIN >> BUTTON) & 1) == BTN_INVERTED));
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	af 01       	movw	r20, r30
  a8:	44 0f       	add	r20, r20
  aa:	55 1f       	adc	r21, r21
  ac:	e3 b1       	in	r30, 0x03	; 3
  ae:	e6 95       	lsr	r30
  b0:	e1 70       	andi	r30, 0x01	; 1
  b2:	e4 2b       	or	r30, r20
        
        if ((sample_data & 0xF) == 0x0F) start = (start << 1) | 1; // debounce
  b4:	9e 2f       	mov	r25, r30
  b6:	9f 70       	andi	r25, 0x0F	; 15
  b8:	9f 30       	cpi	r25, 0x0F	; 15
  ba:	29 f4       	brne	.+10     	; 0xc6 <main+0x46>
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <main+0x48>
        else if ((sample_data & 0b0000) == 0b000) start = start << 1;
  c6:	88 0f       	add	r24, r24
        
        if (start == 0b0011) perform = 1; // edge detection
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	09 f4       	brne	.+2      	; 0xce <main+0x4e>
  cc:	21 e0       	ldi	r18, 0x01	; 1
        
        if (perform == 1) {
  ce:	21 30       	cpi	r18, 0x01	; 1
  d0:	01 f7       	brne	.-64     	; 0x92 <main+0x12>
  d2:	64 c0       	rjmp	.+200    	; 0x19c <main+0x11c>
            for (uint8_t i = 0; i < 5; i++) {
                register_storage = 1 << i;
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	0a 2e       	mov	r0, r26
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x60>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <main+0x5c>
  e4:	f6 2f       	mov	r31, r22
                if (PWM_EN) {
                    // UP
                    for (uint8_t j = 0; j < 255; j++) {
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	29 c0       	rjmp	.+82     	; 0x13c <main+0xbc>
                        LED_PORT = INVERT(LED_PORT | register_storage);
  ea:	88 b1       	in	r24, 0x08	; 8
  ec:	8f 2b       	or	r24, r31
  ee:	88 b9       	out	0x08, r24	; 8
                        for (uint8_t k = 0; k < j/10; k++) _delay_us(10);
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	05 c0       	rjmp	.+10     	; 0xfe <main+0x7e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	45 e3       	ldi	r20, 0x35	; 53
  f6:	4a 95       	dec	r20
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x76>
  fa:	00 00       	nop
  fc:	9f 5f       	subi	r25, 0xFF	; 255
  fe:	8d ec       	ldi	r24, 0xCD	; 205
 100:	b8 9f       	mul	r27, r24
 102:	81 2d       	mov	r24, r1
 104:	11 24       	eor	r1, r1
 106:	86 95       	lsr	r24
 108:	86 95       	lsr	r24
 10a:	86 95       	lsr	r24
 10c:	98 17       	cp	r25, r24
 10e:	90 f3       	brcs	.-28     	; 0xf4 <main+0x74>
                        LED_PORT = INVERT(LED_PORT & ~(register_storage));
 110:	98 b1       	in	r25, 0x08	; 8
 112:	26 2f       	mov	r18, r22
 114:	20 95       	com	r18
 116:	92 23       	and	r25, r18
 118:	98 b9       	out	0x08, r25	; 8
                        for (uint8_t k = 0; k < (255-j/10); k++) _delay_us(10);
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	05 c0       	rjmp	.+10     	; 0x128 <main+0xa8>
 11e:	05 e3       	ldi	r16, 0x35	; 53
 120:	0a 95       	dec	r16
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0xa0>
 124:	00 00       	nop
 126:	9f 5f       	subi	r25, 0xFF	; 255
 128:	49 2f       	mov	r20, r25
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	28 1b       	sub	r18, r24
 132:	31 09       	sbc	r19, r1
 134:	42 17       	cp	r20, r18
 136:	53 07       	cpc	r21, r19
 138:	94 f3       	brlt	.-28     	; 0x11e <main+0x9e>
        if (perform == 1) {
            for (uint8_t i = 0; i < 5; i++) {
                register_storage = 1 << i;
                if (PWM_EN) {
                    // UP
                    for (uint8_t j = 0; j < 255; j++) {
 13a:	bf 5f       	subi	r27, 0xFF	; 255
 13c:	bf 3f       	cpi	r27, 0xFF	; 255
 13e:	a9 f6       	brne	.-86     	; 0xea <main+0x6a>
 140:	29 c0       	rjmp	.+82     	; 0x194 <main+0x114>
                        for (uint8_t k = 0; k < (255-j/10); k++) _delay_us(10);
                    }
                    
                    // DOWN
                    for (uint8_t j = 255; j > 0; j--) {
                        LED_PORT = INVERT(LED_PORT | register_storage);
 142:	88 b1       	in	r24, 0x08	; 8
 144:	8f 2b       	or	r24, r31
 146:	88 b9       	out	0x08, r24	; 8
                        for (uint8_t k = 0; k < j/10; k++) _delay_us(10);
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	05 c0       	rjmp	.+10     	; 0x156 <main+0xd6>
 14c:	15 e3       	ldi	r17, 0x35	; 53
 14e:	1a 95       	dec	r17
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0xce>
 152:	00 00       	nop
 154:	9f 5f       	subi	r25, 0xFF	; 255
 156:	8d ec       	ldi	r24, 0xCD	; 205
 158:	b8 9f       	mul	r27, r24
 15a:	81 2d       	mov	r24, r1
 15c:	11 24       	eor	r1, r1
 15e:	86 95       	lsr	r24
 160:	86 95       	lsr	r24
 162:	86 95       	lsr	r24
 164:	98 17       	cp	r25, r24
 166:	90 f3       	brcs	.-28     	; 0x14c <main+0xcc>
                        LED_PORT = INVERT(LED_PORT & ~(register_storage));
 168:	98 b1       	in	r25, 0x08	; 8
 16a:	26 2f       	mov	r18, r22
 16c:	20 95       	com	r18
 16e:	92 23       	and	r25, r18
 170:	98 b9       	out	0x08, r25	; 8
                        for (uint8_t k = 0; k < (255-j/10); k++) _delay_us(10);
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	05 c0       	rjmp	.+10     	; 0x180 <main+0x100>
 176:	25 e3       	ldi	r18, 0x35	; 53
 178:	2a 95       	dec	r18
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xf8>
 17c:	00 00       	nop
 17e:	9f 5f       	subi	r25, 0xFF	; 255
 180:	49 2f       	mov	r20, r25
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	28 1b       	sub	r18, r24
 18a:	31 09       	sbc	r19, r1
 18c:	42 17       	cp	r20, r18
 18e:	53 07       	cpc	r21, r19
 190:	94 f3       	brlt	.-28     	; 0x176 <main+0xf6>
                        LED_PORT = INVERT(LED_PORT & ~(register_storage));
                        for (uint8_t k = 0; k < (255-j/10); k++) _delay_us(10);
                    }
                    
                    // DOWN
                    for (uint8_t j = 255; j > 0; j--) {
 192:	b1 50       	subi	r27, 0x01	; 1
 194:	b1 11       	cpse	r27, r1
 196:	d5 cf       	rjmp	.-86     	; 0x142 <main+0xc2>
        else if ((sample_data & 0b0000) == 0b000) start = start << 1;
        
        if (start == 0b0011) perform = 1; // edge detection
        
        if (perform == 1) {
            for (uint8_t i = 0; i < 5; i++) {
 198:	af 5f       	subi	r26, 0xFF	; 255
 19a:	01 c0       	rjmp	.+2      	; 0x19e <main+0x11e>
 19c:	a0 e0       	ldi	r26, 0x00	; 0
 19e:	a5 30       	cpi	r26, 0x05	; 5
 1a0:	08 f4       	brcc	.+2      	; 0x1a4 <main+0x124>
 1a2:	98 cf       	rjmp	.-208    	; 0xd4 <main+0x54>
 1a4:	a0 e0       	ldi	r26, 0x00	; 0
 1a6:	70 c0       	rjmp	.+224    	; 0x288 <main+0x208>
                    _delay_ms(500);
                }                
            }
                            
            for (uint8_t i = 0; i < 5; i++) {
                register_storage = 1 << (4-i);
 1a8:	84 e0       	ldi	r24, 0x04	; 4
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	8a 1b       	sub	r24, r26
 1ae:	91 09       	sbc	r25, r1
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <main+0x13a>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	8a 95       	dec	r24
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <main+0x136>
 1be:	f6 2f       	mov	r31, r22
                if (PWM_EN) {
                    // UP
                    for (uint8_t j = 0; j < 255; j++) {
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
 1c2:	32 c0       	rjmp	.+100    	; 0x228 <main+0x1a8>
                        LED_PORT = INVERT(LED_PORT | register_storage);
 1c4:	88 b1       	in	r24, 0x08	; 8
 1c6:	8f 2b       	or	r24, r31
 1c8:	88 b9       	out	0x08, r24	; 8
                        for (uint8_t k = 0; k < j/10; k++) _delay_us(10);
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <main+0x158>
 1ce:	35 e3       	ldi	r19, 0x35	; 53
 1d0:	3a 95       	dec	r19
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x150>
 1d4:	00 00       	nop
 1d6:	9f 5f       	subi	r25, 0xFF	; 255
 1d8:	8d ec       	ldi	r24, 0xCD	; 205
 1da:	c8 9f       	mul	r28, r24
 1dc:	81 2d       	mov	r24, r1
 1de:	11 24       	eor	r1, r1
 1e0:	86 95       	lsr	r24
 1e2:	86 95       	lsr	r24
 1e4:	86 95       	lsr	r24
 1e6:	98 17       	cp	r25, r24
 1e8:	90 f3       	brcs	.-28     	; 0x1ce <main+0x14e>
                        LED_PORT = INVERT(LED_PORT & ~(register_storage));
 1ea:	88 b1       	in	r24, 0x08	; 8
 1ec:	96 2f       	mov	r25, r22
 1ee:	90 95       	com	r25
 1f0:	89 23       	and	r24, r25
 1f2:	88 b9       	out	0x08, r24	; 8
                        for (uint8_t k = 0; k < (255-j/12); k++) _delay_us(10);
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <main+0x182>
 1f8:	45 e3       	ldi	r20, 0x35	; 53
 1fa:	4a 95       	dec	r20
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x17a>
 1fe:	00 00       	nop
 200:	bf 5f       	subi	r27, 0xFF	; 255
 202:	4b 2f       	mov	r20, r27
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	8b ea       	ldi	r24, 0xAB	; 171
 208:	c8 9f       	mul	r28, r24
 20a:	81 2d       	mov	r24, r1
 20c:	11 24       	eor	r1, r1
 20e:	86 95       	lsr	r24
 210:	86 95       	lsr	r24
 212:	86 95       	lsr	r24
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	89 01       	movw	r16, r18
 21a:	08 1b       	sub	r16, r24
 21c:	11 09       	sbc	r17, r1
 21e:	9a 01       	movw	r18, r20
 220:	20 17       	cp	r18, r16
 222:	31 07       	cpc	r19, r17
 224:	4c f3       	brlt	.-46     	; 0x1f8 <main+0x178>
                            
            for (uint8_t i = 0; i < 5; i++) {
                register_storage = 1 << (4-i);
                if (PWM_EN) {
                    // UP
                    for (uint8_t j = 0; j < 255; j++) {
 226:	cf 5f       	subi	r28, 0xFF	; 255
 228:	cf 3f       	cpi	r28, 0xFF	; 255
 22a:	61 f6       	brne	.-104    	; 0x1c4 <main+0x144>
 22c:	bf ef       	ldi	r27, 0xFF	; 255
 22e:	29 c0       	rjmp	.+82     	; 0x282 <main+0x202>
                        for (uint8_t k = 0; k < (255-j/12); k++) _delay_us(10);
                    }
                    
                    // DOWN
                    for (uint8_t j = 255; j > 0; j--) {
                        LED_PORT = INVERT(LED_PORT | register_storage);
 230:	88 b1       	in	r24, 0x08	; 8
 232:	8f 2b       	or	r24, r31
 234:	88 b9       	out	0x08, r24	; 8
                        for (uint8_t k = 0; k < j/10; k++) _delay_us(10);
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	05 c0       	rjmp	.+10     	; 0x244 <main+0x1c4>
 23a:	15 e3       	ldi	r17, 0x35	; 53
 23c:	1a 95       	dec	r17
 23e:	f1 f7       	brne	.-4      	; 0x23c <main+0x1bc>
 240:	00 00       	nop
 242:	9f 5f       	subi	r25, 0xFF	; 255
 244:	8d ec       	ldi	r24, 0xCD	; 205
 246:	b8 9f       	mul	r27, r24
 248:	81 2d       	mov	r24, r1
 24a:	11 24       	eor	r1, r1
 24c:	86 95       	lsr	r24
 24e:	86 95       	lsr	r24
 250:	86 95       	lsr	r24
 252:	98 17       	cp	r25, r24
 254:	90 f3       	brcs	.-28     	; 0x23a <main+0x1ba>
                        LED_PORT = INVERT(LED_PORT & ~(register_storage));
 256:	98 b1       	in	r25, 0x08	; 8
 258:	26 2f       	mov	r18, r22
 25a:	20 95       	com	r18
 25c:	92 23       	and	r25, r18
 25e:	98 b9       	out	0x08, r25	; 8
                        for (uint8_t k = 0; k < (255-j/10); k++) _delay_us(10);
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	05 c0       	rjmp	.+10     	; 0x26e <main+0x1ee>
 264:	25 e3       	ldi	r18, 0x35	; 53
 266:	2a 95       	dec	r18
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0x1e6>
 26a:	00 00       	nop
 26c:	9f 5f       	subi	r25, 0xFF	; 255
 26e:	49 2f       	mov	r20, r25
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	28 1b       	sub	r18, r24
 278:	31 09       	sbc	r19, r1
 27a:	42 17       	cp	r20, r18
 27c:	53 07       	cpc	r21, r19
 27e:	94 f3       	brlt	.-28     	; 0x264 <main+0x1e4>
                        LED_PORT = INVERT(LED_PORT & ~(register_storage));
                        for (uint8_t k = 0; k < (255-j/12); k++) _delay_us(10);
                    }
                    
                    // DOWN
                    for (uint8_t j = 255; j > 0; j--) {
 280:	b1 50       	subi	r27, 0x01	; 1
 282:	b1 11       	cpse	r27, r1
 284:	d5 cf       	rjmp	.-86     	; 0x230 <main+0x1b0>
                    LED_PORT = INVERT(register_storage);
                    _delay_ms(500);
                }                
            }
                            
            for (uint8_t i = 0; i < 5; i++) {
 286:	af 5f       	subi	r26, 0xFF	; 255
 288:	a5 30       	cpi	r26, 0x05	; 5
 28a:	08 f4       	brcc	.+2      	; 0x28e <main+0x20e>
 28c:	8d cf       	rjmp	.-230    	; 0x1a8 <main+0x128>
                    LED_PORT = INVERT(register_storage);
                    _delay_ms(500);
                }
            }
                            
            LED_PORT = INVERT((LED_PORT & ~((1 << LED4) | (1 << LED3)  | (1 << LED2) | (1 << LED1) | (1 << LED0)))); // disable all
 28e:	88 b1       	in	r24, 0x08	; 8
 290:	80 7e       	andi	r24, 0xE0	; 224
 292:	88 b9       	out	0x08, r24	; 8
            perform = 0; // hold edge detector
 294:	20 e0       	ldi	r18, 0x00	; 0
            start = 0b10; // ...
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	fc ce       	rjmp	.-520    	; 0x92 <main+0x12>

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
